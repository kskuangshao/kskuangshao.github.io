<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>markdown教程</title>
    <link href="/2020/11/23/markdown/"/>
    <url>/2020/11/23/markdown/</url>
    
    <content type="html"><![CDATA[<p><img src="image-20200210154710148.png" alt="image-20200210154710148"></p><h1 id="MarkDown基础"><a href="#MarkDown基础" class="headerlink" title="MarkDown基础"></a>MarkDown基础</h1><p><a href="https://www.bilibili.com/video/av87982836#reply2366896129">基础篇视频讲解链接</a><br><a href="https://www.bilibili.com/video/av88551739/">画图篇视频讲解链接</a></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code class="hljs markdown"><span class="hljs-section"># 标题名字（井号的个数代表标题的级数）</span></code></pre><h1 id="一级标题使用1个"><a href="#一级标题使用1个" class="headerlink" title="一级标题使用1个#"></a>一级标题使用1个#</h1><h2 id="二级标题使用2个"><a href="#二级标题使用2个" class="headerlink" title="二级标题使用2个#"></a>二级标题使用2个#</h2><h3 id="三级标题使用3个"><a href="#三级标题使用3个" class="headerlink" title="三级标题使用3个#"></a>三级标题使用3个#</h3><h4 id="四级标题使4用个"><a href="#四级标题使4用个" class="headerlink" title="四级标题使4用个#"></a>四级标题使4用个#</h4><h5 id="五级标题使用5个"><a href="#五级标题使用5个" class="headerlink" title="五级标题使用5个#"></a>五级标题使用5个#</h5><h6 id="六级标题使用6个"><a href="#六级标题使用6个" class="headerlink" title="六级标题使用6个#"></a>六级标题使用6个#</h6><p>####### 最多支持六级标题#</p><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><pre><code class="hljs markdown">这就是 ~~删除线~~ (使用波浪号)</code></pre><p>这就是 <del>删除线</del> (使用波浪号)</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><pre><code class="hljs markdown">这是用来 <span class="hljs-emphasis">*斜体*</span> 的 <span class="hljs-emphasis">_文本_</span></code></pre><p>这是用来 <em>斜体</em> 的 <em>文本</em></p><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><pre><code class="hljs markdown">这是用来 <span class="hljs-strong">**加粗**</span> 的 <span class="hljs-strong">__文本__</span></code></pre><p>这是用来 <strong>加粗</strong> 的 <strong>文本</strong></p><h3 id="斜体-加粗"><a href="#斜体-加粗" class="headerlink" title="斜体+加粗"></a>斜体+加粗</h3><pre><code class="hljs markdown">这是用来 <span class="hljs-strong">**<span class="hljs-emphasis">*斜体+加粗<span class="hljs-strong">**<span class="hljs-emphasis">* 的 <span class="hljs-strong">__<span class="hljs-emphasis">_文本<span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span></span></span></span></span></code></pre><p>这是用来 <strong><em>斜体+加粗</em></strong> 的 <strong><em>文本</em></strong></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线是HTML语法</p><p><code>下划线</code> <u>下划线(快捷键<code>command</code>+<code>u</code>，视频中所有的快捷键都是针对Mac系统，其他系统可自行查找)</u></p><h3 id="高亮（需勾选扩展语法）"><a href="#高亮（需勾选扩展语法）" class="headerlink" title="高亮（需勾选扩展语法）"></a>高亮（需勾选扩展语法）</h3><pre><code class="hljs markdown">这是用来 ==斜体+加粗== 的文本</code></pre><p>这是用来 ==斜体+加粗== 的文本</p><h3 id="下标（需勾选扩展语法）"><a href="#下标（需勾选扩展语法）" class="headerlink" title="下标（需勾选扩展语法）"></a>下标（需勾选扩展语法）</h3><pre><code class="hljs markdown">水 H~2~O 双氧水 H~2~O~2~</code></pre><p>水 H<del>2</del>O </p><p>双氧水 H<del>2</del>O<del>2</del></p><h3 id="上标（需勾选扩展语法）"><a href="#上标（需勾选扩展语法）" class="headerlink" title="上标（需勾选扩展语法）"></a>上标（需勾选扩展语法）</h3><pre><code class="hljs markdown">面积 m^2^ 体积 m^3^</code></pre><p>面积 m^2^<br>体积 m^3^</p><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p> Emoji 支持表情符号，你可以用系统默认的 Emoji 符号（ Windows 用户不一定支持，自己试下~）。 也可以用图片的表情，输入 <code>:</code> 将会出现智能提示。  </p><h4 id="一些表情例子"><a href="#一些表情例子" class="headerlink" title="一些表情例子"></a>一些表情例子</h4><pre><code class="hljs markdown">:smile: :laughing: :dizzy<span class="hljs-emphasis">_face: :sob: :cold_</span>sweat: :sweat<span class="hljs-emphasis">_smile:  :cry: :triumph: :heart_</span>eyes: :relaxed: :sunglasses: :weary::+1: :-1: :100: :clap: :bell: :gift: :question: :bomb: :heart: :coffee: :cyclone: :bow: :kiss: :pray: :sweat<span class="hljs-emphasis">_drops: :hankey: :exclamation: :anger:</span><span class="hljs-emphasis"></span></code></pre><p>:smile: :laughing: :dizzy_face: :sob: :cold_sweat: :sweat_smile:  :cry: :triumph: :heart_eyes: :relaxed: :sunglasses: :weary: :+1: :-1: :100: :clap: :bell: :gift: :question: :bomb: :heart: :coffee: :cyclone: :bow: :kiss: :pray: :sweat_drops: :hankey: :exclamation: :anger:</p><p>(  Mac: <code>control</code>+<code>command</code>+<code>space</code>点选)</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行：</p><pre><code class="hljs markdown">name | price--- | ---fried chicken | 19cola|5</code></pre><blockquote><p>为了使 Markdown 更清晰，<code>|</code> 和 <code>-</code> 两侧需要至少有一个空格（最左侧和最右侧的 <code>|</code> 外就不需要了）。</p></blockquote><table><thead><tr><th>name</th><th>price</th></tr></thead><tbody><tr><td>fried chicken</td><td>19</td></tr><tr><td>cola</td><td>5</td></tr></tbody></table><p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 <code>|</code> 来标记单元格边界，在表头下方的分隔线标记中加入 <code>:</code>，即可标记下方单元格内容的对齐方式：</p><pre><code class="hljs markdown">|    name       | price || :------------ | :---: || fried chicken | 19    || cola          |  32   |</code></pre><table><thead><tr><th align="left">name</th><th align="center">price</th></tr></thead><tbody><tr><td align="left">fried chicken</td><td align="center">19</td></tr><tr><td align="left">cola</td><td align="center">32</td></tr></tbody></table><p>使用快捷键<code>command</code>+<code>opt</code>+<code>T</code>更方便(段落→表格→插入表格，即可查看快捷键)</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><pre><code class="hljs markdown">&gt;“后悔创业”</code></pre><blockquote><p>“后悔创业”</p></blockquote><pre><code class="hljs markdown">&gt;也可以在引用中&gt;&gt;使用嵌套的引用</code></pre><blockquote><p>也可以在引用中</p><blockquote><p>使用嵌套的引用</p></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表–符号-空格"><a href="#无序列表–符号-空格" class="headerlink" title="无序列表–符号 空格"></a>无序列表–符号 空格</h3><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 可以使用 <span class="hljs-code">`*`</span> 作为标记<span class="hljs-bullet">+</span> 也可以使用 <span class="hljs-code">`+`</span><span class="hljs-bullet">-</span> 或者 <span class="hljs-code">`-`</span></code></pre><ul><li>可以使用 <code>*</code> 作为标记</li></ul><ul><li>也可以使用 <code>+</code></li></ul><ul><li>或者 <code>-</code></li></ul><h3 id="有序列表–数字-空格"><a href="#有序列表–数字-空格" class="headerlink" title="有序列表–数字 . 空格"></a>有序列表–数字 <code>.</code> 空格</h3><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 有序列表以数字和 <span class="hljs-code">`.`</span> 开始；<span class="hljs-bullet">3.</span> 数字的序列并不会影响生成的列表序列；<span class="hljs-bullet">4.</span> 但仍然推荐按照自然顺序（1.2.3...）编写。</code></pre><ol><li><p>有序列表以数字和 <code>.</code> 开始；</p></li><li><p>数字的序列并不会影响生成的列表序列；</p></li><li><p>但仍然推荐按照自然顺序（1.2.3…）编写。</p><pre><code class="hljs markdown">可以使用：数字\. 来取消显示为列表（用反斜杠进行转义）</code></pre></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre><code class="hljs markdown">​<span class="hljs-code">```语言名称</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;   &#125;</code></pre><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><pre><code class="hljs markdown">也可以通过 <span class="hljs-code">``，插入行内代码（`</span> 是 <span class="hljs-code">`Tab`</span> 键上边、数字 <span class="hljs-code">`1`</span> 键左侧的那个按键）：例如 <span class="hljs-code">`Markdown`</span></code></pre><p><code>Markdown</code></p><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>代码块中的文本（包括 Markdown 语法）都会显示为原始内容</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以在一行中使用三个或更多的 <code>*</code>、<code>-</code> 或 <code>_</code> 来添加分隔线（``）：</p><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><span class="hljs-strong"><span class="hljs-emphasis">------</span></span><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span></code></pre><hr><hr><hr><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="外部跳转–超链接"><a href="#外部跳转–超链接" class="headerlink" title="外部跳转–超链接"></a>外部跳转–超链接</h3><p>格式为 <code>[link text](link)</code>。</p><pre><code class="hljs markdown">[<span class="hljs-string">帮助文档</span>](<span class="hljs-link">https://support.typora.io/Links/#faq</span>)</code></pre><p><a href="https://support.typora.io/Links/#faq">帮助文档</a></p><h3 id="内部跳转–本文件内跳（Typora支持）"><a href="#内部跳转–本文件内跳（Typora支持）" class="headerlink" title="内部跳转–本文件内跳（Typora支持）"></a>内部跳转–本文件内跳（Typora支持）</h3><p>格式为 <code>[link text](#要去的目的地--标题）</code>。</p><pre><code class="hljs markdown">[<span class="hljs-string">我想跳转</span>](<span class="hljs-link">#饼图（Pie）</span>)</code></pre><blockquote><p>Open Links in Typora</p><p>You can use <code>command+click</code> (macOS), or <code>ctrl+click</code> (Linux/Windows) on links in Typora to jump to target headings, or open them in Typora, or open in related apps.</p></blockquote><p><a href="#%E9%A5%BC%E5%9B%BE%EF%BC%88Pie%EF%BC%89">我想跳转</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>使用 <code>&lt;&gt;</code> 包括的 URL 或邮箱地址会被自动转换为超链接：</p><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">https:</span>//<span class="hljs-attr">www.baidu.com</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">123@email.com</span>&gt;</span></span></code></pre><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><p><a href="mailto:123@email.com">123@email.com</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code class="hljs markdown">![<span class="hljs-string">自己起的图片名字</span>](<span class="hljs-link">图片地址或者图片本地存储的路径</span>)</code></pre><h3 id="网上的图片"><a href="#网上的图片" class="headerlink" title="网上的图片"></a>网上的图片</h3><pre><code class="hljs markdown">![<span class="hljs-string">friedChicken</span>](<span class="hljs-link">https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1580814517&amp;di=2630beac440e5dab0e44c7286a3b2b61&amp;src=http://imgsrc.baidu.com/forum/w=580/sign=12c730c4ff03738dde4a0c2a831ab073/9497794f9258d1091818e6d6d858ccbf6d814d1b.jpg</span>)</code></pre><p><img src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1580814517&di=2630beac440e5dab0e44c7286a3b2b61&src=http://imgsrc.baidu.com/forum/w=580/sign=12c730c4ff03738dde4a0c2a831ab073/9497794f9258d1091818e6d6d858ccbf6d814d1b.jpg" alt="炸鸡"></p><h3 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h3><pre><code class="hljs markdown">![<span class="hljs-string">friedChicken</span>](<span class="hljs-link">friedChicken.jpg</span>)在同一个文件夹里（用相对路径）或者直接拷贝</code></pre><p><img src="friedChicken.jpg" alt="friedChicken"></p><p><img src="../cola.jpg" alt="cola"></p><h2 id="利用Markdown画图（需勾选扩展语法）"><a href="#利用Markdown画图（需勾选扩展语法）" class="headerlink" title="利用Markdown画图（需勾选扩展语法）"></a>利用Markdown画图（需勾选扩展语法）</h2><p><img src="image-20200211211500416.png" alt="image-20200211211500416"></p><p>markdown画图也是轻量级的，功能并不全。</p><p>Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多 Markdown 编辑器中。Mermaid 作为一个使用 JS 渲染的库，生成的不是一个“图片”，而是一段 HTML 代码。</p><p>（不同的编辑器渲染的可能不一样）</p><h3 id="流程图-graph"><a href="#流程图-graph" class="headerlink" title="流程图(graph)"></a>流程图(graph)</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><pre><code class="hljs markdown">graph 方向描述<span class="hljs-code">    图表中的其他语句...</span></code></pre><p>关键字graph表示一个流程图的开始，同时需要指定该图的方向。</p><p>其中“方向描述”为：</p><table><thead><tr><th align="left">用词</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">TB</td><td align="left">从上到下</td></tr><tr><td align="left">BT</td><td align="left">从下到上</td></tr><tr><td align="left">RL</td><td align="left">从右到左</td></tr><tr><td align="left">LR</td><td align="left">从左到右</td></tr></tbody></table><blockquote><p>T = TOP，B = BOTTOM，L = LEFT，R = RIGHT，D = DOWN</p></blockquote><p>最常用的布局方向是TB、LR。</p><pre><code class="hljs markdown">graph TB;  A--&gt;B  B--&gt;C  C--&gt;A</code></pre><pre><code class="hljs mermaid">graph TB;  A--&gt;B  B--&gt;C  C--&gt;A</code></pre><pre><code class="hljs markdown">graph LR;  A--&gt;B  B--&gt;C  C--&gt;A</code></pre><pre><code class="hljs mermaid">graph LR;  A--&gt;B  B--&gt;C  C--&gt;A</code></pre><h4 id="流程图常用符号及含义"><a href="#流程图常用符号及含义" class="headerlink" title="流程图常用符号及含义"></a>流程图常用符号及含义</h4><h5 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a>节点形状</h5><table><thead><tr><th align="left">表述</th><th align="left">说明</th><th>含义</th></tr></thead><tbody><tr><td align="left">id[文字]</td><td align="left">矩形节点</td><td>表示过程，也就是整个流程中的一个环节</td></tr><tr><td align="left">id(文字)</td><td align="left">圆角矩形节点</td><td>表示开始和结束</td></tr><tr><td align="left">id((文字))</td><td align="left">圆形节点</td><td>表示连接。为避免流程过长或有交叉，可将流程切开。成对</td></tr><tr><td align="left">id{文字}</td><td align="left">菱形节点</td><td>表示判断、决策</td></tr><tr><td align="left">id&gt;文字]</td><td align="left">右向旗帜状节点</td><td></td></tr></tbody></table><p><strong>单向箭头线段</strong>：表示流程进行方向</p><blockquote><p>id即为节点的唯一标识，A~F 是当前节点名字，类似于变量名，画图时便于引用</p><p>括号内是节点中要显示的文字，默认节点的名字和显示的文字都为A</p></blockquote><pre><code class="hljs markdown">graph TB  A  B(圆角矩形节点)  C[矩形节点]  D((圆形节点))  E&#123;菱形节点&#125;  F&gt;右向旗帜状节点]</code></pre><pre><code class="hljs mermaid">graph TB  A  B(圆角矩形节点)  C[矩形节点]  D((圆形节点))  E&#123;菱形节点&#125;  F&gt;右向旗帜状节点]</code></pre><pre><code class="hljs markdown">graph TB<span class="hljs-code">    begin(出门)--&gt; buy[买炸鸡]</span><span class="hljs-code">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span><span class="hljs-code">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家)</span><span class="hljs-code">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack</span><span class="hljs-code">    </span></code></pre><pre><code class="hljs mermaid">graph TB    begin(出门)--&gt; buy[买炸鸡]    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家)    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack</code></pre><h5 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h5><pre><code class="hljs markdown">graph TB  A1--&gt;B1  A2---B2  A3--text---B3  A4--text--&gt;B4  A5-.-B5  A6-.-&gt;B6  A7-.text.-B7  A8-.text.-&gt;B8  A9===B9  A10==&gt;B10  A11==text===B11  A12==text==&gt;B12</code></pre><pre><code class="hljs mermaid">graph TB  A1--&gt;B1  A2---B2  A3--text---B3  A4--text--&gt;B4  A5-.-B5  A6-.-&gt;B6  A7-.text.-B7  A8-.text.-&gt;B8  A9&#x3D;&#x3D;&#x3D;B9  A10&#x3D;&#x3D;&gt;B10  A11&#x3D;&#x3D;text&#x3D;&#x3D;&#x3D;B11  A12&#x3D;&#x3D;text&#x3D;&#x3D;&gt;B12</code></pre><pre><code class="hljs mermaid">graph TB A ---B</code></pre><h5 id="子图表"><a href="#子图表" class="headerlink" title="子图表"></a>子图表</h5><p>使用以下语法添加子图表</p><pre><code class="hljs markdown">subgraph 子图表名称<span class="hljs-code">    子图表中的描述语句...</span><span class="hljs-code">end</span></code></pre><pre><code class="hljs markdown">graph TB<span class="hljs-code">  subgraph 买炸鸡前</span><span class="hljs-code">    begin(出门)--&gt; buy[出门买炸鸡]</span><span class="hljs-code">    end</span><span class="hljs-code">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span><span class="hljs-code">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家)</span><span class="hljs-code">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack</span></code></pre><pre><code class="hljs mermaid">graph TB  subgraph 买炸鸡前    begin(出门)--&gt; buy[出门买炸鸡]    end    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家)    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack</code></pre><h3 id="序列图-sequence-diagram"><a href="#序列图-sequence-diagram" class="headerlink" title="序列图(sequence diagram)"></a>序列图(sequence diagram)</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><pre><code class="hljs markdown">sequenceDiagram <span class="hljs-code">[参与者1][消息线][参与者2]:消息体</span><span class="hljs-code">    ...</span></code></pre><blockquote><p><code>sequenceDiagram</code> 为每幅时序图的固定开头</p></blockquote><pre><code class="hljs markdown">sequenceDiagram<span class="hljs-code">Title: 买炸鸡</span><span class="hljs-code">    救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？</span><span class="hljs-code">    炸鸡店小哥--&gt;&gt;救救: 没有，要现炸</span><span class="hljs-code"></span><span class="hljs-code"></span></code></pre><pre><code class="hljs mermaid">sequenceDiagramTitle: 买炸鸡    救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？    炸鸡店小哥--&gt;&gt;救救: 没有，要现炸</code></pre><h4 id="参与者（participant）"><a href="#参与者（participant）" class="headerlink" title="参与者（participant）"></a>参与者（participant）</h4><p>传统时序图概念中参与者有角色和类对象之分，但这里我们不做此区分，用参与者表示一切参与交互的事物，可以是人、类对象、系统等形式。中间竖直的线段从上至下表示时间的流逝。</p><pre><code class="hljs markdown">sequenceDiagram<span class="hljs-code">    participant 参与者 1</span><span class="hljs-code">    participant 参与者 2</span><span class="hljs-code">    ...</span><span class="hljs-code">    participant 简称 as 参与者 3 #该语法可以在接下来的描述中使用简称来代替参与者 3</span></code></pre><blockquote><p><code>participant &lt;参与者名称&gt;</code> 声明参与者，语句次序即为参与者横向排列次序。</p></blockquote><h4 id="消息线"><a href="#消息线" class="headerlink" title="消息线"></a>消息线</h4><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-&gt;</td><td align="left">无箭头的实线</td></tr><tr><td align="left">–&gt;</td><td align="left">无箭头的虚线</td></tr><tr><td align="left">-&gt;&gt;</td><td align="left">有箭头的实线（主动发出消息）</td></tr><tr><td align="left">–-&gt;&gt;</td><td align="left">有箭头的虚线（响应）</td></tr><tr><td align="left">-x</td><td align="left">末端为叉的实线（表示异步）</td></tr><tr><td align="left">–x</td><td align="left">末端为叉的虚线（表示异步）</td></tr></tbody></table><h4 id="处理中-激活框"><a href="#处理中-激活框" class="headerlink" title="处理中-激活框"></a>处理中-激活框</h4><p>从消息接收方的时间线上标记一小段时间，表示对消息进行处理的时间间隔。</p><p>在消息线末尾增加 <code>+</code> ，则消息接收者进入当前消息的“处理中”状态；<br>在消息线末尾增加 <code>-</code> ，则消息接收者离开当前消息的“处理中”状态。</p><pre><code class="hljs markdown">sequenceDiagram<span class="hljs-code">    participant 99 as 救救</span><span class="hljs-code">    participant seller as 炸鸡店小哥</span><span class="hljs-code">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><span class="hljs-code">    seller --&gt;&gt; 99: 没有，要现炸。</span><span class="hljs-code">    99 -x +seller:给我炸！</span><span class="hljs-code">    seller --&gt;&gt; -99: 您的炸鸡好了！</span></code></pre><pre><code class="hljs mermaid">sequenceDiagram    participant 99 as 救救    participant seller as 炸鸡店小哥    99 -&gt;&gt; seller: 还有炸鸡吗？    seller --&gt;&gt; 99: 没有，要现炸。    99 -x +seller:给我炸！    seller --&gt;&gt; -99: 您的炸鸡好了！</code></pre><h4 id="注解（note）"><a href="#注解（note）" class="headerlink" title="注解（note）"></a>注解（note）</h4><p>语法如下</p><pre><code class="hljs markdown">Note 位置表述 参与者: 标注文字</code></pre><p>其中位置表述可以为</p><table><thead><tr><th align="left">表述</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">right of</td><td align="left">右侧</td></tr><tr><td align="left">left of</td><td align="left">左侧</td></tr><tr><td align="left">over</td><td align="left">在当中，可以横跨多个参与者</td></tr></tbody></table><pre><code class="hljs markdown">sequenceDiagram<span class="hljs-code">    participant 99 as 救救</span><span class="hljs-code">    participant seller as 炸鸡店小哥</span><span class="hljs-code">    Note over 99,seller : 热爱炸鸡</span><span class="hljs-code">    Note left of 99 : 女</span><span class="hljs-code">    Note right of seller : 男</span><span class="hljs-code">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><span class="hljs-code">    seller --&gt;&gt; 99: 没有，要现炸。</span><span class="hljs-code">    99 -x +seller : 给我炸！</span><span class="hljs-code">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><span class="hljs-code"></span><span class="hljs-code"></span></code></pre><pre><code class="hljs mermaid">sequenceDiagram    participant 99 as 救救    participant seller as 炸鸡店小哥    Note over 99,seller : 热爱炸鸡    Note left of 99 : 女    Note right of seller : 男    99 -&gt;&gt; seller: 还有炸鸡吗？    seller --&gt;&gt; 99: 没有，要现炸。    99 -x +seller : 给我炸！    seller --&gt;&gt; -99: 您的炸鸡好了！</code></pre><h4 id="循环（loop）"><a href="#循环（loop）" class="headerlink" title="循环（loop）"></a>循环（loop）</h4><p>在条件满足时，重复发出消息序列。（相当于编程语言中的 while 语句。）</p><pre><code class="hljs markdown">sequenceDiagram<span class="hljs-code">    participant 99 as 救救</span><span class="hljs-code">    participant seller as 炸鸡店小哥</span><span class="hljs-code">   </span><span class="hljs-code">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><span class="hljs-code">    seller --&gt;&gt; 99: 没有，要现炸。</span><span class="hljs-code">    99 -&gt;&gt; +seller:给我炸！</span><span class="hljs-code">    loop 三分钟一次</span><span class="hljs-code">        99 -&gt;&gt; seller : 我的炸鸡好了吗？</span><span class="hljs-code">        seller --&gt;&gt; 99 : 正在炸</span><span class="hljs-code">    end</span><span class="hljs-code">    seller --&gt;&gt; -99: 您的炸鸡好了！</span></code></pre><pre><code class="hljs mermaid">sequenceDiagram    participant 99 as 救救    participant seller as 炸鸡店小哥       99 -&gt;&gt; seller: 还有炸鸡吗？    seller --&gt;&gt; 99: 没有，要现炸。    99 -&gt;&gt; +seller:给我炸！    loop 三分钟一次        99 -&gt;&gt; seller : 我的炸鸡好了吗？        seller --&gt;&gt; 99 : 正在炸    end    seller --&gt;&gt; -99: 您的炸鸡好了！</code></pre><h4 id="选择（alt）"><a href="#选择（alt）" class="headerlink" title="选择（alt）"></a>选择（alt）</h4><p>在多个条件中作出判断，每个条件将对应不同的消息序列。（相当于 if 及 else if 语句。）</p><pre><code class="hljs markdown">sequenceDiagram    <span class="hljs-code">    participant 99 as 救救</span><span class="hljs-code">    participant seller as 炸鸡店小哥</span><span class="hljs-code">    99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？</span><span class="hljs-code">    seller --&gt;&gt; 99 : 可卖的炸鸡数</span><span class="hljs-code">    </span><span class="hljs-code">    alt 可卖的炸鸡数 &gt; 3</span><span class="hljs-code">        99 -&gt;&gt; seller : 买三只！</span><span class="hljs-code">    else 1 &lt; 可卖的炸鸡数 &lt; 3</span><span class="hljs-code">        99 -&gt;&gt; seller : 有多少买多少</span><span class="hljs-code">    else 可卖的炸鸡数 &lt; 1</span><span class="hljs-code">        99 -&gt;&gt; seller : 那我明天再来</span><span class="hljs-code">    end</span><span class="hljs-code"></span><span class="hljs-code">    seller --&gt;&gt; 99 : 欢迎下次光临</span></code></pre><pre><code class="hljs mermaid">sequenceDiagram        participant 99 as 救救    participant seller as 炸鸡店小哥    99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？    seller --&gt;&gt; 99 : 可卖的炸鸡数        alt 可卖的炸鸡数 &gt; 3        99 -&gt;&gt; seller : 买三只！    else 1 &lt; 可卖的炸鸡数 &lt; 3        99 -&gt;&gt; seller : 有多少买多少    else 可卖的炸鸡数 &lt; 1        99 -&gt;&gt; seller : 那我明天再来    end    seller --&gt;&gt; 99 : 欢迎下次光临</code></pre><h4 id="可选（opt）"><a href="#可选（opt）" class="headerlink" title="可选（opt）"></a>可选（opt）</h4><p>在某条件满足时执行消息序列，否则不执行。相当于单个分支的 if 语句。</p><pre><code class="hljs markdown">sequenceDiagram<span class="hljs-code">    participant 99 as 救救</span><span class="hljs-code">    participant seller as 炸鸡店小哥</span><span class="hljs-code">    99 -&gt;&gt; seller : 买炸鸡</span><span class="hljs-code">    opt 全都卖完了</span><span class="hljs-code">        seller --&gt;&gt; 99 : 下次再来</span><span class="hljs-code">    end</span></code></pre><pre><code class="hljs mermaid">sequenceDiagram    participant 99 as 救救    participant seller as 炸鸡店小哥    99 -&gt;&gt; seller : 买炸鸡    opt 全都卖完了        seller --&gt;&gt; 99 : 下次再来    end</code></pre><h4 id="并行（Par）"><a href="#并行（Par）" class="headerlink" title="并行（Par）"></a>并行（Par）</h4><p>将消息序列分成多个片段，这些片段并行执行。</p><pre><code class="hljs markdown">sequenceDiagram   participant 99 as 救救   participant seller as 炸鸡店小哥   <span class="hljs-code">    99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！</span><span class="hljs-code"></span><span class="hljs-code">    par 并行执行</span><span class="hljs-code">        seller -&gt;&gt; seller : 装可乐</span><span class="hljs-code">    and</span><span class="hljs-code">        seller -&gt;&gt; seller : 炸炸鸡</span><span class="hljs-code">    end</span><span class="hljs-code"></span><span class="hljs-code">    seller --&gt;&gt; 99 : 您的炸鸡好了！</span></code></pre><pre><code class="hljs mermaid">sequenceDiagram   participant 99 as 救救   participant seller as 炸鸡店小哥       99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！    par 并行执行        seller -&gt;&gt; seller : 装可乐    and        seller -&gt;&gt; seller : 炸炸鸡    end    seller --&gt;&gt; 99 : 您的炸鸡好了！</code></pre><h3 id="饼图（Pie）"><a href="#饼图（Pie）" class="headerlink" title="饼图（Pie）"></a>饼图（Pie）</h3><pre><code class="hljs markdown">pie<span class="hljs-code">    title Pie Chart</span><span class="hljs-code">    &quot;Dogs&quot; : 386</span><span class="hljs-code">    &quot;Cats&quot; : 85</span><span class="hljs-code">    &quot;Rats&quot; : 150 </span></code></pre><pre><code class="hljs mermaid">pie    title Pie Chart    &quot;Dogs&quot; : 386    &quot;Cats&quot; : 85    &quot;Rats&quot; : 150     &quot;panda&quot; : 200</code></pre><blockquote><p><a href="http://support.typora.io/Draw-Diagrams-With-Markdown/">Typora支持mermaid的官方链接</a></p></blockquote><h3 id="甘特图（gantt）"><a href="#甘特图（gantt）" class="headerlink" title="甘特图（gantt）"></a>甘特图（gantt）</h3><pre><code class="hljs markdown"> title 标题dateFormat 日期格式section 部分名任务名:参数一, 参数二, 参数三, 参数四，参数五 //参数一：crit（是否重要，红框框） 或者 不填 //参数二：done（已完成）、active（正在进行） 或者 不填(表示为待完成状态) //参数三：取小名 或者 不填 //参数四：任务开始时间 //参数五：任务结束时间</code></pre><blockquote><p><a href="https://mermaid-js.github.io/mermaid/#/gantt">官方教程</a></p></blockquote><pre><code class="hljs routeros">gantt       dateFormat  YYYY-MM-DD       title Adding GANTT diagram functionality <span class="hljs-keyword">to</span> mermaid       section A section       Completed task            :done,    des1, 2014-01-06,2014-01-08       Active task               :active,  des2, 2014-01-09, 3d       Future task               :         des3, after des2, 5d       Future task2              :         des4, after des3, 5d       section Critical tasks       Completed task <span class="hljs-keyword">in</span> the critical line :crit, done, 2014-01-06,24h       Implement parser <span class="hljs-keyword">and</span> jison          :crit, done, after des1, 2d       Create tests <span class="hljs-keyword">for</span> parser             :crit, active, 3d       Future task <span class="hljs-keyword">in</span> critical line        :crit, 5d       Create tests <span class="hljs-keyword">for</span> renderer           :2d       <span class="hljs-builtin-name">Add</span> <span class="hljs-keyword">to</span> mermaid                      :1d       section Documentation       Describe gantt syntax               :active, a1, after des1, 3d       <span class="hljs-builtin-name">Add</span> gantt diagram <span class="hljs-keyword">to</span> demo<span class="hljs-built_in"> page </span>     :after a1  , 20h       <span class="hljs-builtin-name">Add</span> another diagram <span class="hljs-keyword">to</span> demo<span class="hljs-built_in"> page </span>   :doc1, after a1  , 48h       section Last section       Describe gantt syntax               :after doc1, 3d       <span class="hljs-builtin-name">Add</span> gantt diagram <span class="hljs-keyword">to</span> demo<span class="hljs-built_in"> page </span>     :20h       <span class="hljs-builtin-name">Add</span> another diagram <span class="hljs-keyword">to</span> demo<span class="hljs-built_in"> page </span>   :48h</code></pre><pre><code class="hljs mermaid">gantt       dateFormat  YYYY-MM-DD       title Adding GANTT diagram functionality to mermaid       section A section       Completed task            :done,    des1, 2014-01-06,2014-01-08       Active task               :active,  des2, 2014-01-09, 3d       Future task               :         des3, after des2, 5d       Future task2              :         des4, after des3, 5d       section Critical tasks       Completed task in the critical line :crit, done, 2014-01-06,24h       Implement parser and jison          :crit, done, after des1, 2d       Create tests for parser             :crit, active, 3d       Future task in critical line        :crit, 5d       Create tests for renderer           :2d       Add to mermaid                      :1d       section Documentation       Describe gantt syntax               :active, a1, after des1, 3d       Add gantt diagram to demo page      :after a1  , 20h       Add another diagram to demo page    :doc1, after a1  , 48h       section Last section       Describe gantt syntax               :after doc1, 3d       Add gantt diagram to demo page      :20h       Add another diagram to demo page    :48h</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新虚拟机、服务器搭建、常用命令</title>
    <link href="/2020/11/22/linux01/"/>
    <url>/2020/11/22/linux01/</url>
    
    <content type="html"><![CDATA[<h1 id="新创建虚拟机准备工作"><a href="#新创建虚拟机准备工作" class="headerlink" title="新创建虚拟机准备工作"></a>新创建虚拟机准备工作</h1><h2 id="centos下载地址"><a href="#centos下载地址" class="headerlink" title="centos下载地址"></a>centos下载地址</h2><p>&lt;<a href="https://man.linuxde.net/download/CentOS/">CentOS下载，CentOS系统下载_Linux下载 (linuxde.net)</a>&gt;</p><h2 id="查看本机ip地址"><a href="#查看本机ip地址" class="headerlink" title="查看本机ip地址"></a>查看本机ip地址</h2><pre><code class="hljs shell">ifconfig</code></pre><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><pre><code class="hljs shell">systemctl stop firewalldsystemctl disable firewalld<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#不是root用户+sudo</span></span></code></pre><h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><p>修改两个地方</p><ul><li>添加当前ip 主机名</li></ul><pre><code class="hljs shell">vim /etc/hosts</code></pre><ul><li>添加主机名</li></ul><pre><code class="hljs shell">vim /etc/hostname</code></pre><h2 id="添加用户名用户组"><a href="#添加用户名用户组" class="headerlink" title="添加用户名用户组"></a>添加用户名用户组</h2><pre><code class="hljs shell">[root@JD ~]# useradd rain[root@JD ~]# id rainuid=1001(rain) gid=1001(rain) 组=1001(rain)拓展useradd -g testgroup testuser-g 所属组-d 家目录-s 所用的shell 用户和组都是raingroupadd hadoop</code></pre><h2 id="赋予用户组权限"><a href="#赋予用户组权限" class="headerlink" title="赋予用户组权限"></a>赋予用户组权限</h2><p>三种方式，推荐第一种方式</p><pre><code class="hljs shell">vim /etc/passwdrain:x:1001:1001::/home/rain:/bin/bash<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#把id修改成0</span></span></code></pre><pre><code class="hljs shell">vim /etc/suduoers<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#Allows people in group wheel to run all commands</span></span><span class="hljs-meta">%</span><span class="bash">wheel  ALL=(ALL)  ALL</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#把前面的注释去掉</span></span></code></pre><pre><code class="hljs shell">vim /etc/sudoers<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># Allow root to run any commands anywhere</span></span>root  ALL=(ALL)   ALL<span class="hljs-meta">%</span><span class="bash">hadoop  ALL=(ALL)   ALL</span><span class="hljs-meta">#</span><span class="bash">root下添加一行.注意这里%hadoop代表的意思</span></code></pre><pre><code class="hljs shell">xxx is not in the sudoers file.  This incident will be reported解决方法:编辑sudoers文件有两种办法，一种是以root帐号执行visudo，另一种是root帐号执行vi /etc/sudoers.其实两者都是修改/etc/sudoers。 假设你的用户名是“superman”，属于“supergroup”用户组。为了让用户superman能够执行sudo命，你可以在sudoers文件中加上一下四行的任意一行。    superman            ALL=（ALL）                ALL     %supergroup            ALL=（ALL）                ALL    superman               ALL=（ALL）                 NOPASSWD：ALL(出于方便，推荐使用此设置)     %supergroup            ALL=（ALL）                NOPASSWD：ALL解释说明：第一行：允许用户superman执行sudo命令（需要输入密码）。 第二行：允许用户组supergroup里面的用户执行sudo命令（需要输入密码）。第三行：允许用户superman执行sudo命令，并且在执行的时候不输入密码。第四行：允许用户组supergroup里面的用户执行sudo命令，并且在执行的时候不输入密码。 当然如果你理解上面的原理后，可以直接输入如下命令解决此问题su -echo &#x27;xxx ALL=(ALL) ALL&#x27; &gt;&gt; /etc/sudoers  (其中xxx代表用户名)</code></pre><pre><code class="hljs shell">chmod g+r path/file 加读权限 当前目录chmod -R g+r path/file 加读权限 当前目录以及子目录<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#g-r 减读权限</span></span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#g+w 加写权限</span></span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#g-w</span></span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#g+x 加执行权限</span></span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#g-x</span></span></code></pre><h2 id="查看用户名和用户组"><a href="#查看用户名和用户组" class="headerlink" title="查看用户名和用户组"></a>查看用户名和用户组</h2><pre><code class="hljs shell">cat /etc/passwdcat /etc/group</code></pre><h2 id="永久性删除用户账号"><a href="#永久性删除用户账号" class="headerlink" title="永久性删除用户账号"></a>永久性删除用户账号</h2><p>没有测试过</p><pre><code class="hljs shell">userdel testuser  groupdel testgroup  usermod –G testgroup testuser</code></pre><h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><ul><li>权限问题经常出现</li></ul><pre><code class="hljs shell">错误：Permission denied</code></pre><ul><li>解决</li></ul><pre><code class="hljs shell">chmod -R 777 文件夹/文件路径chown -R 用户：用户组 文件夹/文件路径</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>查看文件大小</p><pre><code class="hljs shell">du -sh xxx.log</code></pre><p>模糊搜索</p><pre><code class="hljs shell">find / -name &#x27;*hadoop*&#x27;</code></pre><p>内存大小</p><pre><code class="hljs shell">top</code></pre><pre><code class="hljs shell">free -m</code></pre><p>系统状态</p><pre><code class="hljs shell">ps -ef</code></pre><p>历史记录</p><pre><code class="hljs shell">history</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jvm虚拟机探究</title>
    <link href="/2020/11/19/jvm01/"/>
    <url>/2020/11/19/jvm01/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么学习jvm虚拟机"><a href="#为什么学习jvm虚拟机" class="headerlink" title="为什么学习jvm虚拟机"></a>为什么学习jvm虚拟机</h1><ul><li>生产上运行spark的时候时常出现GC OVERHEAD等报错</li><li>作为对于java语言底层（深层）的了解</li></ul><h1 id="JVM探究"><a href="#JVM探究" class="headerlink" title="JVM探究"></a>JVM探究</h1><ul><li><p>谈谈你对jvm的理解？java8虚拟机和之前的变换更新？</p></li><li><p>什么是oom？什么是栈溢出StackOverFlowError？怎么分析？</p></li><li><p>JVM常用调优参数？</p></li><li><p>内存快照如何抓取，怎么分析Dump文件？</p></li><li><p>谈谈JVM中类加载器你的认识？</p><p>jvm中类加载器 rt-jar、ext(扩展jar包)、用户的application</p></li></ul><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><ul><li>jvm的位置</li><li>jvm体系结构</li><li>类加载器</li><li>双亲委派机制</li><li>沙箱安全机制</li><li>Native</li><li>PC寄存器、方法区、栈、堆</li><li>三种JVM</li><li>新生代、老年区、永久区</li><li>堆内存调优</li><li>GC 常用算法</li><li>JMM</li><li>总结</li></ul><h3 id="学习方案"><a href="#学习方案" class="headerlink" title="学习方案"></a>学习方案</h3><ul><li>百度</li><li>思维导图 - 在线思维导图去搜索</li></ul><p><img src="images/image-20201119013059487.png" alt="image-20201119013059487"></p><h4 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1. 类加载器"></a>1. 类加载器</h4><ul><li>作用：加载class文件</li></ul><p><img src="D:\hexo\kskuangshaoblog\source_posts\images\image-20201117010051266.png" alt="image-20201117010051266"></p><ol><li>虚拟机自带加载器</li><li>启动类加载器</li><li>扩展类加载器</li><li>应用类加载器</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产关于hive，sparksql的问题总结</title>
    <link href="/2020/11/19/hive02/"/>
    <url>/2020/11/19/hive02/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="DDL数据库定义语言"><a href="#DDL数据库定义语言" class="headerlink" title="DDL数据库定义语言"></a>DDL数据库定义语言</h2><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span>、<span class="hljs-keyword">ALTER</span>、<span class="hljs-keyword">DROP</span>、<span class="hljs-keyword">TRUNCATE</span>、<span class="hljs-keyword">COMMENT</span>、<span class="hljs-keyword">RENAME</span></code></pre><h2 id="DML数据操纵语言"><a href="#DML数据操纵语言" class="headerlink" title="DML数据操纵语言"></a>DML数据操纵语言</h2><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>、<span class="hljs-keyword">INSERT</span>、<span class="hljs-keyword">UPDATE</span>、<span class="hljs-keyword">DELETE</span>、<span class="hljs-keyword">MERGE</span>、<span class="hljs-keyword">CALL</span>、<span class="hljs-keyword">EXPLAIN</span> PLAN<span class="hljs-keyword">LOCK</span> <span class="hljs-keyword">TABLE</span></code></pre><h2 id="DCL数据库控制语言"><a href="#DCL数据库控制语言" class="headerlink" title="DCL数据库控制语言"></a>DCL数据库控制语言</h2><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span>、<span class="hljs-keyword">REVOKE</span></code></pre><h2 id="TCL事务控制语言"><a href="#TCL事务控制语言" class="headerlink" title="TCL事务控制语言"></a>TCL事务控制语言</h2><pre><code class="hljs sql"><span class="hljs-keyword">SAVEPOINT</span>设置保存点、<span class="hljs-keyword">ROLLBACK</span>回滚、<span class="hljs-keyword">SET</span> TRANSCATION</code></pre><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><h2 id="组合分隔符的解决方案"><a href="#组合分隔符的解决方案" class="headerlink" title="组合分隔符的解决方案"></a>组合分隔符的解决方案</h2><ul><li>建表</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test0001(<span class="hljs-keyword">id</span> <span class="hljs-keyword">string</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> SERDE <span class="hljs-string">&#x27;org.apache.hadoop.hive.contrib.serde2.MultiDelimitSerDe&#x27;</span> <span class="hljs-keyword">WITH</span> SERDEPROPERTIES (<span class="hljs-string">&quot;field.delim&quot;</span>=<span class="hljs-string">&quot;\&quot;</span>\;\&quot;&quot;);</code></pre><ul><li>添加jar包</li></ul><pre><code class="hljs sql">add jar /usr/local/hive/lib/hive-contrib-1.2.0.jar;</code></pre><ul><li>插入数据</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> test0001 <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;ks&#x27;</span>);</code></pre><ul><li>查询结果</li></ul><pre><code class="hljs shell">1&quot;;&quot;ks</code></pre><h2 id="多表关联查询建表"><a href="#多表关联查询建表" class="headerlink" title="多表关联查询建表"></a>多表关联查询建表</h2><ul><li>方式一（不推荐）</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Test7<span class="hljs-keyword">as</span> <span class="hljs-keyword">with</span> a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player),b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>,<span class="hljs-keyword">position</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">position</span>)<span class="hljs-keyword">select</span> a.id,b.name <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.name=b.name;</code></pre><ul><li>方拾二（推荐）</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Test8<span class="hljs-keyword">as</span> <span class="hljs-keyword">with</span>a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player),b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>,<span class="hljs-keyword">position</span> <span class="hljs-keyword">from</span> player)<span class="hljs-keyword">select</span> a.id,b.name,b.position <span class="hljs-keyword">from</span> a<span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> b <span class="hljs-keyword">where</span> a.name=b.name;</code></pre><h3 id="spark-sql-查询建表报错"><a href="#spark-sql-查询建表报错" class="headerlink" title="spark-sql 查询建表报错"></a>spark-sql 查询建表报错</h3><pre><code class="hljs pgsql">Caused <span class="hljs-keyword">by</span>: org.apache.spark.<span class="hljs-keyword">sql</span>.catalyst.<span class="hljs-keyword">parser</span>.ParseException: Datatype <span class="hljs-type">void</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> supported原因：Spark不支持Hive表中的<span class="hljs-type">void</span>字段类型，代码中临时<span class="hljs-keyword">create</span>的Hive表中，如果<span class="hljs-keyword">from</span>的源表中某字段为全空值，则<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>时该临时表的这个字段类型就会变成<span class="hljs-type">void</span>。</code></pre><pre><code class="hljs angelscript">解决方法：如果是上面这种情况，可以用Hive跑任务或者修改该Hive表的字段类型不为<span class="hljs-built_in">void</span>，或将<span class="hljs-literal">null</span>转换为<span class="hljs-built_in">string</span>等。</code></pre><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><h2 id="输入数据并动态分区"><a href="#输入数据并动态分区" class="headerlink" title="输入数据并动态分区"></a>输入数据并动态分区</h2><pre><code class="hljs sql"><span class="hljs-comment">--案例：比方说一个订单表，按照品牌（pt_brand_x）分区</span><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> app.sbl_order <span class="hljs-keyword">partition</span>(pt_brand_x) <span class="hljs-comment">--动态分区</span><span class="hljs-keyword">select</span> order_id,       order_price,       pt_biz_date,       pt_brand_x <span class="hljs-comment">--动态分区字段放最后</span><span class="hljs-keyword">from</span> <span class="hljs-keyword">order</span>;</code></pre><h2 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h2><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> pt_brand_x     <span class="hljs-keyword">AS</span> pt_brand_x, integration_id <span class="hljs-keyword">AS</span> integration_id, position_name  <span class="hljs-keyword">AS</span> position_name, row_wid        <span class="hljs-keyword">AS</span> row_wid, emp_last_name  <span class="hljs-keyword">AS</span> emp_last_name, <span class="hljs-keyword">CASE</span> <span class="hljs-comment">--position_name 长度小于10</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">length</span>(position_name) &lt; <span class="hljs-number">10</span> <span class="hljs-keyword">THEN</span> position_name <span class="hljs-comment">--instr函数代替了like方式，返回字符串在字段中的位置，没有为0 </span> <span class="hljs-comment">--神经病，精神病，病 ,查 神 返回1 2 0 </span> <span class="hljs-comment">--也可以放到where里&gt;0查看字段里是否存在这个字</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">instr</span>(<span class="hljs-keyword">upper</span>(position_name), <span class="hljs-string">&#x27;LANCOME&#x27;</span>) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> position_name <span class="hljs-keyword">WHEN</span> position_name = <span class="hljs-string">&#x27;LAN_CN_Position&#x27;</span> <span class="hljs-keyword">THEN</span> position_name <span class="hljs-comment">--从第4个位置开始保留到最后</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">substr</span>(position_name, <span class="hljs-number">4</span>) <span class="hljs-keyword">END</span>        <span class="hljs-keyword">AS</span> new_ba_code<span class="hljs-keyword">FROM</span> dws.mirror_dim_sbl_w_position_d<span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span> = <span class="hljs-number">1</span>;</code></pre><h1 id="sparksql问题"><a href="#sparksql问题" class="headerlink" title="sparksql问题"></a>sparksql问题</h1><h2 id="GC-overhead"><a href="#GC-overhead" class="headerlink" title="GC overhead"></a>GC overhead</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><pre><code class="hljs"><span class="hljs-attribute">java.lang.OutOfMemoryError</span>: GC overhead limit exceeded 这种情况发生的原因是, 程序基本上耗尽了所有的可用内存, GC也清理不了。JVM抛出 java.lang.OutOfMemoryError: GC overhead limit exceeded 错误就是发出了这样的信号: 执行垃圾收集的时间比例太大, 有效的运算量太小. 默认情况下, 如果GC花费的时间超过 98%, 并且GC回收的内存少于 2%, JVM就会抛出这个错误。</code></pre><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><h4 id="创建分区表，限制分区插入"><a href="#创建分区表，限制分区插入" class="headerlink" title="创建分区表，限制分区插入"></a>创建分区表，限制分区插入</h4><pre><code class="hljs powershell">关于数据量大插入慢的问题：可以使用分区表，按照品牌分区，如果一次吧所有品牌插入出现<span class="hljs-built_in">GC</span> overhead，其他报错等问题，可以通过限制品牌分批插入。</code></pre><h4 id="发生到executor之后"><a href="#发生到executor之后" class="headerlink" title="发生到executor之后"></a>发生到executor之后</h4><ul><li>参数</li></ul><pre><code class="hljs shell">spark-sql \--master yarn \--deploy-mode client \--executor-cores 1 \--executor-memory 8G \--driver-memory 8G \--queue root.hypers.adhoc \--conf spark.yarn.executor.memoryoverhead=2048m \--conf spark.storage.memoryFraction=0.4 \--conf spark.hadoop.hive.cli.print.header=true \--conf spark.sql.shuffle.partitions=500 \--conf spark.dynamicAllocation.enabled=true \--conf spark.sql.autoBroadcastJoinThreshold=-1 \--conf spark.dynamicAllocation.maxExecutors=80 \--conf spark.driver.maxResultSize=4g \--hiveconf hive.exec.dynamic.partition=true \--hiveconf hive.exec.dynamic.partition.mode=nonstrict \--hiveconf hive.exec.max.dynamic.partitions=10000 \--hiveconf hive.exec.max.dynamic.partitions.pernode=10000 \--hiveconf spark.debug.maxToStringFields=200 \-f lrl.sql</code></pre><ul><li>现象</li></ul><pre><code class="hljs angelscript">--此阶段executor端--(<span class="hljs-number">7029</span>/<span class="hljs-number">7037</span>)代表task（未完成/已完成）的数量<span class="hljs-number">20</span>/<span class="hljs-number">11</span>/<span class="hljs-number">11</span> <span class="hljs-number">23</span>:<span class="hljs-number">55</span>:<span class="hljs-number">22</span> INFO scheduler.TaskSetManager: Finished task <span class="hljs-number">7000.0</span> <span class="hljs-keyword">in</span> stage <span class="hljs-number">0.0</span> (TID <span class="hljs-number">7000</span>) <span class="hljs-keyword">in</span> <span class="hljs-number">13864</span> ms on worker32.loreal.com (executor <span class="hljs-number">5</span>) (<span class="hljs-number">7029</span>/<span class="hljs-number">7037</span>)--个人理解如果在executor端出现gc，应该是executor-memory的问题如果发生在<span class="hljs-number">20</span>/<span class="hljs-number">11</span>/<span class="hljs-number">11</span> <span class="hljs-number">23</span>:<span class="hljs-number">55</span>:<span class="hljs-number">47</span> INFO spark.ContextCleaner: Cleaned accumulator <span class="hljs-number">11</span><span class="hljs-number">20</span>/<span class="hljs-number">11</span>/<span class="hljs-number">11</span> <span class="hljs-number">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">08</span> INFO spark.ExecutorAllocationManager: Request to remove executorIds: <span class="hljs-number">45</span>, <span class="hljs-number">30</span>, <span class="hljs-number">39</span>, <span class="hljs-number">51</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">48</span>, <span class="hljs-number">33</span>, <span class="hljs-number">27</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>, <span class="hljs-number">42</span>, <span class="hljs-number">36</span>, <span class="hljs-number">21</span>, <span class="hljs-number">18</span>, <span class="hljs-number">24</span>, <span class="hljs-number">41</span>, <span class="hljs-number">35</span>, <span class="hljs-number">7</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">44</span>, <span class="hljs-number">50</span>, <span class="hljs-number">23</span>, <span class="hljs-number">38</span>, <span class="hljs-number">47</span>, <span class="hljs-number">26</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">32</span>, <span class="hljs-number">1</span>之后则是driver-memory的问题</code></pre><ul><li>尝试通过提高driver端的内存</li></ul><pre><code class="hljs shell">--conf driver-memory 10G</code></pre><ul><li>driver堆外内存</li></ul><pre><code class="hljs shell">--spark.driver.memoryOverhead=2048m</code></pre><ul><li>executor-core的数量太多，导致多个core之间争夺GC时间以及资源，最后大部分时间都花到了gc上</li></ul><pre><code class="hljs ada"><span class="hljs-comment">--executor-cores 1</span></code></pre><h4 id="关于一些资料的总结"><a href="#关于一些资料的总结" class="headerlink" title="关于一些资料的总结"></a>关于一些资料的总结</h4><pre><code class="hljs apache"><span class="hljs-attribute">executor</span>-cores cores越多，能快速的执行分配给自己的task 建议<span class="hljs-number">2</span>-<span class="hljs-number">4</span>个<span class="hljs-attribute">driver</span>-memory默认<span class="hljs-number">1</span>g，如果使用collect算子，那么会将rdd算子全部拉到driver上执行，确保driver内存足够大，否则oom<span class="hljs-attribute">spark</span>.default.parallelism = num-executors*executor-cores*<span class="hljs-number">2</span>-<span class="hljs-number">3</span> 并行度<span class="hljs-attribute">spark</span>.storage.memoryFraction executor中用于持久化的比例，默认<span class="hljs-number">0</span>.<span class="hljs-number">6</span><span class="hljs-attribute">spark</span>.shuffle.memoryFraction 用来进行shuffle(read)操作的内存比例，默认<span class="hljs-number">0</span>.<span class="hljs-number">2</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
      <tag>生产</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tez</title>
    <link href="/2020/10/28/tez/"/>
    <url>/2020/10/28/tez/</url>
    
    <content type="html"><![CDATA[<h1 id="tez官网"><a href="#tez官网" class="headerlink" title="tez官网"></a>tez官网</h1><pre><code class="hljs sql">http://tez.apache.org/</code></pre><h1 id="什么是Tez？"><a href="#什么是Tez？" class="headerlink" title="什么是Tez？"></a>什么是Tez？</h1><p>tez是一个基于内存的计算引擎，通过允许像 Apache Hive 和 Apache Pig 这样的项目运行复杂的 DAG 任务，Tez 可用于处理数据。</p><ul><li>优点：快，节点少</li><li>缺点：对内存要求高</li></ul><h1 id="Tez安装部署"><a href="#Tez安装部署" class="headerlink" title="Tez安装部署"></a>Tez安装部署</h1><ol><li>查看官网选择和hadoop匹配的tez版本</li></ol><pre><code class="hljs applescript">hadoop <span class="hljs-built_in">version</span></code></pre><ol start="2"><li>下载</li></ol><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.apache.org<span class="hljs-regexp">/dyn/</span>closer.lua<span class="hljs-regexp">/tez/</span><span class="hljs-number">0.8</span>.<span class="hljs-number">5</span>/</code></pre><ol start="3"><li>解压</li></ol><ul><li>注意：解压到hive的节点上</li></ul><ol start="4"><li>下载的tez包（ apache-tez-0.8.5-bin.tar.gz） 上传到hdfs上</li></ol><ul><li>除了hive节点，其他节点也需要tez计算</li></ul><p>5. </p>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
      <tag>tez</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql函数</title>
    <link href="/2020/10/28/sql01/"/>
    <url>/2020/10/28/sql01/</url>
    
    <content type="html"><![CDATA[<h1 id="总结常用sql函数"><a href="#总结常用sql函数" class="headerlink" title="总结常用sql函数"></a>总结常用sql函数</h1><h2 id="1-unix-timestamp-amp-from-unixtime"><a href="#1-unix-timestamp-amp-from-unixtime" class="headerlink" title="1.unix_timestamp &amp; from_unixtime()"></a>1.unix_timestamp &amp; from_unixtime()</h2><ul><li>unix_timestamp</li></ul><pre><code class="hljs sql">spark-sql&gt; select unix_timestamp(&#x27;2018-12-05 01:10:00&#x27;,&#x27;yyyy-MM-dd HH:mm:ss&#x27;);1543943400</code></pre> <pre><code class="hljs sql">spark-sql&gt; select unix_timestamp(&#x27;2018-12-05&#x27;,&#x27;yyyy-MM-dd&#x27;);1543939200</code></pre><ul><li>from_unixtime()</li></ul><pre><code class="hljs sql">spark-sql&gt; select from_unixtime(1543943400,&#x27;yyyy-MM-dd&#x27;);2018-12-05</code></pre><h2 id="2-cast-name-as-string-类型转换"><a href="#2-cast-name-as-string-类型转换" class="headerlink" title="2. cast(name as string) 类型转换"></a>2. cast(name as string) 类型转换</h2><ul><li>cnt int –&gt; cnt string</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">cast</span>(cnt <span class="hljs-keyword">as</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">from</span> player;</code></pre><h2 id="3-if-name-’ks’-x-y"><a href="#3-if-name-’ks’-x-y" class="headerlink" title="3. if(name=’ks’,x,y)"></a>3. if(name=’ks’,x,y)</h2><ul><li>如果name字段是ks，返回x，否则返回y</li></ul><h2 id="4-hive中map类型的字段使用"><a href="#4-hive中map类型的字段使用" class="headerlink" title="4. hive中map类型的字段使用"></a>4. hive中map类型的字段使用</h2><ul><li>创建表</li><li>注意集合，key的分隔符</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> player_info (groupname <span class="hljs-keyword">string</span>,info <span class="hljs-keyword">map</span>&lt;<span class="hljs-keyword">string</span>,<span class="hljs-keyword">string</span>&gt;)<span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> <span class="hljs-keyword">DELIMITED</span>                                          <span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\t&#x27;</span>                                COLLECTION ITEMS <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;,&#x27;</span>                       <span class="hljs-keyword">MAP</span> <span class="hljs-keyword">KEYS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;:&#x27;</span>;</code></pre><ul><li>文本数据准备</li><li>player_info.txt</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">win_team</span><span class="hljs-selector-tag">name</span><span class="hljs-selector-pseudo">:ks</span>,<span class="hljs-selector-tag">age</span><span class="hljs-selector-pseudo">:18</span>,<span class="hljs-selector-tag">position</span><span class="hljs-selector-pseudo">:carry</span><span class="hljs-selector-tag">win_team</span><span class="hljs-selector-tag">name</span><span class="hljs-selector-pseudo">:ajshon</span>,<span class="hljs-selector-tag">age</span><span class="hljs-selector-pseudo">:19</span>,<span class="hljs-selector-tag">position</span><span class="hljs-selector-pseudo">:mid</span><span class="hljs-selector-tag">lose_team</span><span class="hljs-selector-tag">name</span><span class="hljs-selector-pseudo">:rain</span>,<span class="hljs-selector-tag">age</span><span class="hljs-selector-pseudo">:28</span>,<span class="hljs-selector-tag">position</span><span class="hljs-selector-pseudo">:top</span></code></pre><ul><li>导入数据到表</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">load</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/home/hadoop/data/player_info.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> player_info;</code></pre><ul><li>查询</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> info[<span class="hljs-string">&#x27;name&#x27;</span>] <span class="hljs-keyword">from</span> player_info;</code></pre><ul><li>结果</li></ul><pre><code class="hljs apache"><span class="hljs-attribute">Driver</span>.java:<span class="hljs-number">376</span>, took <span class="hljs-number">0</span>.<span class="hljs-number">719682</span> s<span class="hljs-attribute">ks</span><span class="hljs-attribute">ajshon</span><span class="hljs-attribute">rain</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql语句</title>
    <link href="/2020/10/28/sql02/"/>
    <url>/2020/10/28/sql02/</url>
    
    <content type="html"><![CDATA[<h1 id="总结常用sql语句"><a href="#总结常用sql语句" class="headerlink" title="总结常用sql语句"></a>总结常用sql语句</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>建表语句</p><ul><li>多表结构相同</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">as</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player1<span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player2;</code></pre><ul><li>多表结构不相同</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tables2<span class="hljs-keyword">as</span> <span class="hljs-keyword">with</span>a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player1),b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,age <span class="hljs-keyword">from</span> player2)<span class="hljs-keyword">select</span> a.id,a.name,b.age <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.id=b.id;</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tables3<span class="hljs-keyword">as</span> <span class="hljs-keyword">with</span>a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player1),b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,age <span class="hljs-keyword">from</span> player2)<span class="hljs-keyword">select</span> a.id,a.name,b.age <span class="hljs-keyword">from</span> a<span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span>b <span class="hljs-keyword">on</span> a.id=b.id;</code></pre><h2 id="元数据-和-建表语句-分开"><a href="#元数据-和-建表语句-分开" class="headerlink" title="元数据 和 建表语句 分开"></a>元数据 和 建表语句 分开</h2><h3 id="方式一（hdfs）"><a href="#方式一（hdfs）" class="headerlink" title="方式一（hdfs）"></a>方式一（hdfs）</h3><ul><li>元数据test.txt上传hdfs</li></ul><pre><code class="hljs awk">hdfs dfs -put test.txt <span class="hljs-regexp">/hive/</span>test/</code></pre><ul><li>建表指定位置</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> player4(<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> <span class="hljs-keyword">delimited</span> <span class="hljs-keyword">fields</span> <span class="hljs-keyword">terminated</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span> location <span class="hljs-string">&#x27;/hive/test&#x27;</span>;</code></pre><h3 id="方式二（load方式，本地、hdfs）"><a href="#方式二（load方式，本地、hdfs）" class="headerlink" title="方式二（load方式，本地、hdfs）"></a>方式二（load方式，本地、hdfs）</h3><ul><li>建表</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> player4(<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> <span class="hljs-keyword">delimited</span> <span class="hljs-keyword">fields</span> <span class="hljs-keyword">terminated</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span></code></pre><ul><li>元数据load到表中(“[ ]”代表可选)</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">load</span> <span class="hljs-keyword">data</span> [<span class="hljs-keyword">local</span>] inpath <span class="hljs-string">&#x27;/home/hadoop/data/test.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> player4</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive数据类型、语法、分区表等概念</title>
    <link href="/2020/10/26/hive01/"/>
    <url>/2020/10/26/hive01/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table><thead><tr><th>Hive数据类型</th><th>java数据类型</th><th>长度</th><th>例子</th></tr></thead><tbody><tr><td>TinyInt</td><td>byte</td><td>1byte有符号整数</td><td>20</td></tr><tr><td>SmallInt</td><td>short</td><td>2byte有符号整数</td><td>20</td></tr><tr><td>Int</td><td>int</td><td>4byte有符号整数</td><td>20</td></tr><tr><td>BigInt</td><td>long</td><td>8byte有符号整数</td><td>20</td></tr><tr><td>Boolean</td><td>boolean</td><td>布尔类型</td><td>true，false</td></tr><tr><td>Float</td><td>float</td><td>单精度浮点数</td><td>3.14159</td></tr><tr><td>Double</td><td>double</td><td>双精度浮点数</td><td>3.14159</td></tr><tr><td>String</td><td>string</td><td>字符</td><td>‘now is time’</td></tr><tr><td>Timestamp</td><td></td><td>时间类型</td><td></td></tr><tr><td>binary</td><td></td><td>字节数组</td><td></td></tr></tbody></table><ul><li>hive中的string相当于数据库的varchar，理论上能存2G的字符串</li><li>小转大，不能大转小</li><li>string、float可以隐式转换成double</li><li>tinyint、smallint、int可以转换为float</li><li>boolean类型不能转换为其他类型</li><li>强制类型转换，可以使用CAST(1 AS INT)把字符串’1’转换成整数1，㘝强制类型转换失败，返回NULL</li></ul><h1 id="DDL数据定义"><a href="#DDL数据定义" class="headerlink" title="DDL数据定义"></a>DDL数据定义</h1><h2 id="库的增删改查"><a href="#库的增删改查" class="headerlink" title="库的增删改查"></a>库的增删改查</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h3><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> mydb;</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> mydb location <span class="hljs-string">&#x27;/db_hive2.db&#x27;</span>;</code></pre><h3 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2. 删除数据库"></a>2. 删除数据库</h3><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> mydb;</code></pre><ul><li>删除不为空的database</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> mydb <span class="hljs-keyword">cascade</span>;</code></pre><h3 id="3-查看数据库"><a href="#3-查看数据库" class="headerlink" title="3. 查看数据库"></a>3. 查看数据库</h3><ul><li>模糊查询</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;db_hive*&#x27;</span>;</code></pre><ul><li>查看数据库详细信息</li></ul><pre><code class="hljs pgsql"><span class="hljs-keyword">desc</span> <span class="hljs-keyword">database</span> extended db_hive;</code></pre><h3 id="4-修改数据库"><a href="#4-修改数据库" class="headerlink" title="4. 修改数据库"></a>4. 修改数据库</h3><ul><li>注意：元数据信息不能更改（数据库名，数据库所在位置）</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> db_hive <span class="hljs-keyword">set</span> dbproperties(<span class="hljs-string">&#x27;createtime&#x27;</span>=<span class="hljs-string">&#x27;20200808&#x27;</span>)</code></pre><h2 id="表的增删改查"><a href="#表的增删改查" class="headerlink" title="表的增删改查"></a>表的增删改查</h2><h3 id="1-建表语句"><a href="#1-建表语句" class="headerlink" title="1. 建表语句"></a>1. 建表语句</h3><ul><li>分区分的是文件夹，分桶分的是文件（对应partitioned by、clustered by）</li><li>‘[ ]’表示可选，’|’表示二选一</li><li>指定分隔符</li></ul><pre><code class="hljs sql">row format delimited fields terminated by &#x27;/t&#x27;</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">TEMPORARY</span>] [<span class="hljs-keyword">EXTERNAL</span>] <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db_name.]table_name  [(col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ... [constraint_specification])]  [<span class="hljs-keyword">COMMENT</span> table_comment]  [PARTITIONED <span class="hljs-keyword">BY</span> (col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ...)]  [CLUSTERED <span class="hljs-keyword">BY</span> (col_name, col_name, ...) [SORTED <span class="hljs-keyword">BY</span> (col_name [<span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span>], ...)] <span class="hljs-keyword">INTO</span> num_buckets BUCKETS]  [SKEWED <span class="hljs-keyword">BY</span> (col_name, col_name, ...)     <span class="hljs-keyword">ON</span> ((col_value, col_value, ...), (col_value, col_value, ...), ...)     [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> DIRECTORIES]  [   [<span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> row_format]    [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> file_format]     | <span class="hljs-keyword">STORED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;storage.handler.class.name&#x27;</span> [<span class="hljs-keyword">WITH</span> SERDEPROPERTIES (...)]  ]  [LOCATION hdfs_path]</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">TEMPORARY</span>] [<span class="hljs-keyword">EXTERNAL</span>] <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db_name.]table_name    <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> TEMPORARY available in Hive 0.14.0 and later)</span>  [(col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ... [constraint_specification])]  [<span class="hljs-keyword">COMMENT</span> table_comment]  [PARTITIONED <span class="hljs-keyword">BY</span> (col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ...)]  [CLUSTERED <span class="hljs-keyword">BY</span> (col_name, col_name, ...) [SORTED <span class="hljs-keyword">BY</span> (col_name [<span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span>], ...)] <span class="hljs-keyword">INTO</span> num_buckets BUCKETS]  [SKEWED <span class="hljs-keyword">BY</span> (col_name, col_name, ...)                  <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.10.0 and later)]</span>     <span class="hljs-keyword">ON</span> ((col_value, col_value, ...), (col_value, col_value, ...), ...)     [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> DIRECTORIES]  [   [<span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> row_format]    [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> file_format]     | <span class="hljs-keyword">STORED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;storage.handler.class.name&#x27;</span> [<span class="hljs-keyword">WITH</span> SERDEPROPERTIES (...)]  <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.6.0 and later)</span>  ]  [LOCATION hdfs_path]  [TBLPROPERTIES (property_name=property_value, ...)]   <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.6.0 and later)</span>   [<span class="hljs-keyword">AS</span> select_statement];   <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.5.0 and later; not supported for external tables)</span>   <span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">TEMPORARY</span>] [<span class="hljs-keyword">EXTERNAL</span>] <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db_name.]table_name  <span class="hljs-keyword">LIKE</span> existing_table_or_view_name  [LOCATION hdfs_path]; data_type  : primitive_type  | array_type  | map_type  | struct_type  | union_type  <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.7.0 and later)</span> primitive_type  : TINYINT  | SMALLINT  | INT  | BIGINT  | BOOLEAN  | FLOAT  | DOUBLE  | DOUBLE PRECISION <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 2.2.0 and later)</span>  | STRING  | BINARY      <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.8.0 and later)</span>  | TIMESTAMP   <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.8.0 and later)</span>  | DECIMAL     <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.11.0 and later)</span>  | DECIMAL(precision, scale)  <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.13.0 and later)</span>  | DATE        <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.12.0 and later)</span>  | VARCHAR     <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.12.0 and later)</span>  | CHAR        <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.13.0 and later)</span> array_type  : ARRAY &lt; data_type &gt; map_type  : MAP &lt; primitive_type, data_type &gt; struct_type  : STRUCT &lt; col_name : data_type [COMMENT col_comment], ...&gt; union_type   : UNIONTYPE &lt; data_type, data_type, ... &gt;  -- (Note: Available in Hive 0.7.0 and later) row_format  : DELIMITED [FIELDS TERMINATED BY char [ESCAPED BY char]] [COLLECTION ITEMS TERMINATED BY char]        [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char]        [NULL DEFINED AS char]   <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.13 and later)</span>  | SERDE serde_name [<span class="hljs-keyword">WITH</span> SERDEPROPERTIES (property_name=property_value, property_name=property_value, ...)] file_format:  : SEQUENCEFILE  | TEXTFILE    <span class="hljs-comment">-- (Default, depending on hive.default.fileformat configuration)</span>  | RCFILE      <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.6.0 and later)</span>  | ORC         <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.11.0 and later)</span>  | PARQUET     <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.13.0 and later)</span>  | AVRO        <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.14.0 and later)</span>  | INPUTFORMAT input_format_classname OUTPUTFORMAT output_format_classname constraint_specification:  : [, PRIMARY <span class="hljs-keyword">KEY</span> (col_name, ...) <span class="hljs-keyword">DISABLE</span> <span class="hljs-keyword">NOVALIDATE</span> ]    [, <span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (col_name, ...) <span class="hljs-keyword">REFERENCES</span> table_name(col_name, ...) <span class="hljs-keyword">DISABLE</span> <span class="hljs-keyword">NOVALIDATE</span></code></pre><h3 id="2-修改表"><a href="#2-修改表" class="headerlink" title="2. 修改表"></a>2. 修改表</h3><ul><li>重命名表</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student4 <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> student;</code></pre><ul><li>增删改分区</li></ul><p>见如下分区表</p><ul><li>增加、修改、替换列信息</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student4 <span class="hljs-keyword">add</span> <span class="hljs-keyword">columns</span>(<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>);</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student4 <span class="hljs-keyword">change</span> <span class="hljs-keyword">column</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">names</span> <span class="hljs-keyword">string</span>;</code></pre><pre><code class="hljs sql"><span class="hljs-comment">--替换所有列</span><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student4 <span class="hljs-keyword">replace</span> <span class="hljs-keyword">columns</span>(did <span class="hljs-built_in">int</span>);</code></pre><h2 id="内部表和外部表区别"><a href="#内部表和外部表区别" class="headerlink" title="内部表和外部表区别"></a>内部表和外部表区别</h2><ol><li>删除表内部表的元数据也会删除，外部表则不会</li><li>建表语句不同，外部表有external关键字</li></ol><ul><li><p>内部表也叫管理表</p></li><li><p>内部表转外部表（大写！）</p></li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student2 <span class="hljs-keyword">set</span> tblproperties(<span class="hljs-string">&#x27;EXTERNAL&#x27;</span>=<span class="hljs-string">&#x27;TURE&#x27;</span>);</code></pre><ul><li>然后查询一下</li></ul><pre><code class="hljs sql">desc formatted student2;</code></pre><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>hive的分区表就是分目录，把一个大的数据集根据业务需要分割成小的数据集，在查询的时候通过WHERE子句中的表达选择所需要的的指定分区，这样查询效率高。谓词下推</p><ul><li>谓词下推：先过滤成小数据集，再查询，效率高。</li><li>分区字段也是表中的一个字段，只不过比较特殊。（不能使用表属性名作为分区字段名，自行体会）</li></ul><h3 id="一级分区"><a href="#一级分区" class="headerlink" title="一级分区"></a>一级分区</h3><ol><li>增加分区</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;202008&#x27;</span>) <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;202009&#x27;</span>);</code></pre><ol start="2"><li>删除分区</li></ol><ul><li>注意这里是’ , ‘</li></ul><pre><code class="hljs sql">alte table student <span class="hljs-keyword">drop</span> <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;202008&#x27;</span>) ,<span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;202009&#x27;</span>);</code></pre><ol start="3"><li>查看分区表有多少个分区</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">partitions</span> student;</code></pre><ol start="4"><li>查看分区表的结构</li></ol><pre><code class="hljs sql">desc formatted student;</code></pre><h3 id="二级分区"><a href="#二级分区" class="headerlink" title="二级分区"></a>二级分区</h3><ol><li>建表</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student2(<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>) partitioned <span class="hljs-keyword">by</span> (<span class="hljs-keyword">month</span> <span class="hljs-keyword">string</span>,<span class="hljs-keyword">day</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> <span class="hljs-keyword">delimited</span> <span class="hljs-keyword">fields</span> <span class="hljs-keyword">terminated</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;</code></pre><ol start="2"><li>导入本地数据</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">load</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/home/hadoop/data/student2.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> student2 <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;2019-07&#x27;</span>,<span class="hljs-keyword">day</span>=<span class="hljs-string">&#x27;01&#x27;</span>);</code></pre><ol start="3"><li>查询</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student2 <span class="hljs-keyword">where</span> <span class="hljs-keyword">month</span> = <span class="hljs-string">&#x27;2019-07&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">day</span> = <span class="hljs-string">&#x27;01&#x27;</span>;</code></pre><pre><code> 4. 如果手动创建了一个分区文件夹，并上传文件，是不能直接查分区的，需要修复或者添加分区</code></pre><ul><li>修复指令（很多分区都没有添加）</li></ul><pre><code class="hljs sql">msck <span class="hljs-keyword">repair</span> <span class="hljs-keyword">table</span> student2;</code></pre><ul><li>添加分区（推荐）</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student2 <span class="hljs-keyword">add</span> <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span> = <span class="hljs-string">&#x27;2019-11&#x27;</span>,<span class="hljs-keyword">day</span> = <span class="hljs-string">&#x27;01&#x27;</span>)</code></pre><h1 id="DML数据操作"><a href="#DML数据操作" class="headerlink" title="DML数据操作"></a>DML数据操作</h1><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><h3 id="1-向表中装载数据"><a href="#1-向表中装载数据" class="headerlink" title="1. 向表中装载数据"></a>1. 向表中装载数据</h3><pre><code class="hljs sql"><span class="hljs-keyword">load</span> <span class="hljs-keyword">data</span> [<span class="hljs-keyword">local</span>] inpath <span class="hljs-string">&#x27;xxx/xxx/xxx.txt&#x27;</span> overwrite|<span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> student [<span class="hljs-keyword">partition</span>(<span class="hljs-keyword">day</span>=<span class="hljs-string">&#x27;01&#x27;</span>,<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;201708&#x27;</span>]</code></pre><ul><li>local：本地或者hdfs</li></ul><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a>2. 插入数据</h3><ul><li>基本插入</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;201702&#x27;</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;ks&#x27;</span>)</code></pre><ul><li>覆盖插入</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> student <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;20170208&#x27;</span>) <span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;201702&#x27;</span></code></pre><h3 id="3-创建表并加载数据"><a href="#3-创建表并加载数据" class="headerlink" title="3.创建表并加载数据"></a>3.创建表并加载数据</h3><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> student <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> student</code></pre><h3 id="3-导出数据"><a href="#3-导出数据" class="headerlink" title="3.导出数据"></a>3.导出数据</h3><h4 id="insert导出"><a href="#insert导出" class="headerlink" title="insert导出"></a>insert导出</h4><h5 id="1-将结果导出到本地"><a href="#1-将结果导出到本地" class="headerlink" title="1.将结果导出到本地"></a>1.将结果导出到本地</h5><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">local</span> <span class="hljs-keyword">directory</span> <span class="hljs-string">&#x27;/opt/module/datas/export/student&#x27;</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student;</code></pre><h5 id="2-将查询结果格式化导出到本地-hdfs上"><a href="#2-将查询结果格式化导出到本地-hdfs上" class="headerlink" title="2. 将查询结果格式化导出到本地/hdfs上"></a>2. 将查询结果格式化导出到本地/hdfs上</h5><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite [<span class="hljs-keyword">local</span>] <span class="hljs-keyword">directory</span> <span class="hljs-string">&#x27;/opt/module/datas/export/student1&#x27;</span> <span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> <span class="hljs-keyword">DELIMITED</span> <span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\t&#x27;</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student;</code></pre><h4 id="hadoop导出"><a href="#hadoop导出" class="headerlink" title="hadoop导出"></a>hadoop导出</h4><pre><code class="hljs shell">hdfs dfs -get /user/hive/warehouse/student/month=20201125 /opt/module/datas/export/student3.txt</code></pre><ul><li>导出并合并</li></ul><pre><code class="hljs shell">hdfs dfs -getmerge /xxx /xxx/xxx.txt</code></pre><h4 id="sqoop导出"><a href="#sqoop导出" class="headerlink" title="sqoop导出"></a>sqoop导出</h4><ul><li>用于hive、mysql之间的导入导出</li></ul><h4 id="export导出"><a href="#export导出" class="headerlink" title="export导出"></a>export导出</h4><pre><code class="hljs shell">export table default.student to &#x27;/user/hive/warehouse/export/student&#x27;;</code></pre><h3 id="4-清空表"><a href="#4-清空表" class="headerlink" title="4. 清空表"></a>4. 清空表</h3><ul><li>注意：只能清空管理表，不能清空外部表</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> default.student;</code></pre><h3 id="5-查询"><a href="#5-查询" class="headerlink" title="5. 查询"></a>5. 查询</h3><ul><li>匹配多个单词</li><li>匹配一个单词</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;k%&#x27;</span>;</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;k_&#x27;</span>;</code></pre><ul><li>正则（包含2的）</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal <span class="hljs-keyword">RLIKE</span> <span class="hljs-string">&#x27;[2]&#x27;</span>;</code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>and/or/not</li></ul><h3 id="6-分组"><a href="#6-分组" class="headerlink" title="6. 分组"></a>6. 分组</h3><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><h4 id="having"><a href="#having" class="headerlink" title="having"></a>having</h4><ul><li>配合group by 使用</li></ul><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><ul><li>支持等值连接,不支持非等值连接</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name,b.age,c.sex<span class="hljs-keyword">from</span> student a<span class="hljs-keyword">join</span> person b<span class="hljs-keyword">on</span> a.id = b.id<span class="hljs-keyword">join</span> emp c<span class="hljs-keyword">on</span> a.id = c.id;</code></pre><h4 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h4><ul><li>省略连接条件</li><li>连接条件无效</li><li>表中所有行相互连接</li></ul><h3 id="7-排序"><a href="#7-排序" class="headerlink" title="7. 排序"></a>7. 排序</h3><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><ul><li>全局排序，只有一个reducer</li><li>放到句尾</li></ul><h4 id="sort-by"><a href="#sort-by" class="headerlink" title="sort by"></a>sort by</h4><ul><li>局部排序，reducer内排序</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">set</span> mapreduce.job.reduces=<span class="hljs-number">3</span>;</code></pre><h4 id="distribute-by"><a href="#distribute-by" class="headerlink" title="distribute by"></a>distribute by</h4><ul><li>类似于mr中的partition进行分区，结合sort by使用</li></ul><pre><code class="hljs sql"><span class="hljs-comment">--按照部门分区，工资排序</span><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">directory</span> <span class="hljs-string">&#x27;/opt/module/datas/dis-by&#x27;</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">distribute</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">sort</span> <span class="hljs-keyword">by</span> sal;</code></pre><h4 id="cluster-by"><a href="#cluster-by" class="headerlink" title="cluster by"></a>cluster by</h4><ul><li>distribute by + sort by 并且分区字段和排序字段相同</li><li>只能升序</li><li>防止数据倾斜</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>order by只有一个reducer</p></li><li><p>distribute by + sort by 指定一个分区字段，在分区内排序，可以防止数据倾斜</p></li><li><p>cluster by 同上，但是不能降序</p></li><li><p>建表语句里有ed，查询里没有ed</p></li></ul><h1 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h1><ul><li>分区表放到不同的文件夹，分桶表放到不同的文件</li></ul><h2 id="创建分桶表"><a href="#创建分桶表" class="headerlink" title="创建分桶表"></a>创建分桶表</h2><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu_buck(<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>)clustered <span class="hljs-keyword">by</span>(<span class="hljs-keyword">id</span>) <span class="hljs-comment">--分桶关键字</span><span class="hljs-keyword">into</span> <span class="hljs-number">4</span> buckets <span class="hljs-comment">--几个桶</span><span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> <span class="hljs-keyword">delimited</span> <span class="hljs-keyword">fields</span> <span class="hljs-keyword">terminated</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;</code></pre><ul><li>load data进去，hdfs上的文件不会拆开</li></ul><h4 id="需要设置属性"><a href="#需要设置属性" class="headerlink" title="需要设置属性"></a>需要设置属性</h4><pre><code class="hljs sql"><span class="hljs-keyword">set</span> hive.enforce.bucketing=<span class="hljs-literal">true</span>; <span class="hljs-comment">--开启分桶</span><span class="hljs-keyword">set</span> mapreduce.job.reduces=<span class="hljs-number">-1</span>; <span class="hljs-comment">--根据桶数自动设置reducer个数</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu_buck <span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> stu;</code></pre><h4 id="分桶抽样查询"><a href="#分桶抽样查询" class="headerlink" title="分桶抽样查询"></a>分桶抽样查询</h4><ul><li>tablesample(bucket x out of y) </li><li>x从哪个桶开始抽</li><li>y必须是x的倍数或者因子</li><li>举个例子 16个桶 x,y = 1,4 ,抽的是1,5,9,13</li><li>x&lt;y</li><li>z桶个数 ，（x,y）  第一个桶 x，第二个桶 x+y ,第三个桶x+2y。。。 一共z/y个桶</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu_buck <span class="hljs-keyword">tablesample</span>(<span class="hljs-keyword">bucket</span> <span class="hljs-number">1</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> <span class="hljs-number">4</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">id</span>);</code></pre><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="空字段赋值"><a href="#空字段赋值" class="headerlink" title="空字段赋值"></a>空字段赋值</h2><ul><li>可以用值代替，可以用列</li></ul><pre><code class="hljs sql">nvl(comm,-1) <span class="hljs-comment">--如果奖金为空，-1代替</span></code></pre><pre><code class="hljs sql">nvl(comm,nvl(sal,0)) <span class="hljs-comment">--如果奖金为空，用工资，如果工资为空，为0</span></code></pre><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><pre><code class="hljs sql"><span class="hljs-keyword">select</span> data_format(<span class="hljs-string">&#x27;2020-5-23&#x27;</span>,<span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>);</code></pre><ul><li>2020/05/20这种格式的时间处理</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> regexp_replace(<span class="hljs-string">&#x27;2020/5/20&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>);</code></pre><ul><li>时间相加、减</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> data_add(<span class="hljs-string">&#x27;2020-5-23&#x27;</span>,<span class="hljs-number">3</span>);</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">select</span> data_add(<span class="hljs-string">&#x27;2020-5-23,-5&#x27;</span>);<span class="hljs-comment">--指定天数减5天</span></code></pre><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">datediff</span>(<span class="hljs-string">&#x27;2020-6-22&#x27;</span>,<span class="hljs-string">&#x27;2020-6-20&#x27;</span>);<span class="hljs-comment">--前减后</span></code></pre><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><ul><li>oracle，mysql5.8+，hive支持</li></ul><pre><code class="hljs sql">OVER() 指定分析函数的数据窗口打下，随着行变化而变化</code></pre><pre><code class="hljs pgsql"><span class="hljs-keyword">CURRENT</span> <span class="hljs-keyword">ROW</span> 当前行n <span class="hljs-keyword">PRECEDING</span> 往前n行n <span class="hljs-keyword">FOLLOWING</span> 往后n行<span class="hljs-keyword">UNBOUNDED</span> ：<span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">PRECEDING</span>表示从前面的起点，<span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">FOLLOWING</span>到后面的终点</code></pre><pre><code class="hljs reasonml"><span class="hljs-constructor">LAG(<span class="hljs-params">col</span>,<span class="hljs-params">n</span>)</span>： 往前第n行数据<span class="hljs-constructor">LEAD(<span class="hljs-params">col</span>,<span class="hljs-params">n</span>)</span>： 往后第n行数据<span class="hljs-constructor">NTILE(<span class="hljs-params">n</span>)</span>：把有序分区中的行分发到指定数据组中，各个组有编号，编号从<span class="hljs-number">1</span>开始，对于每一行，NTILE返回此行所属的组的编号。（注意：n必须为<span class="hljs-built_in">int</span>类型）</code></pre><ul><li>需求</li></ul><ol><li>查询2017年4月份购买过的顾客及总人数</li><li>查询顾客的购买明细及月购买总额</li><li>上述场景，将要cost按照日期进行累加</li><li>查询顾客上次购买时间</li><li>查询前20%的订单信息</li></ol><ul><li>数据准备</li></ul><pre><code class="hljs sql">name,orderdate,costjack,2017-01-01,10jack,2017-01-01,20jack,2017-04-01,50toms,2017-04-12,50toms,2017-04-12,20</code></pre><ul><li>sql</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>,<span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">over</span>()<span class="hljs-keyword">from</span> bussiness<span class="hljs-keyword">where</span> <span class="hljs-keyword">substring</span>(orderdate,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>)=<span class="hljs-string">&#x27;2017-04&#x27;</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">name</span>;</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  *, <span class="hljs-comment">--消费明细</span> <span class="hljs-keyword">sum</span>(<span class="hljs-keyword">cost</span>) <span class="hljs-comment">--购买总额</span><span class="hljs-keyword">from</span> business;</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">select</span> orderdate, <span class="hljs-keyword">cost</span>， <span class="hljs-keyword">sum</span>(<span class="hljs-keyword">cost</span>) <span class="hljs-keyword">over</span>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> orderdate) <span class="hljs-comment">--cost按月累加实现</span><span class="hljs-keyword">from</span> business<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> orderdate;</code></pre><ul><li>如下这个是难点</li><li>lag往下错位，lead往上错位</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>, orderdate, <span class="hljs-keyword">cost</span>, lag(orderdate,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;1970-01-01&#x27;</span>) <span class="hljs-keyword">over</span>(<span class="hljs-keyword">distribute</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">sort</span> <span class="hljs-keyword">by</span> orderdate) <span class="hljs-comment">--新的一列，1.每个窗口初始值是参数；2.orderdate是上一行的orderdate。（错一位）</span><span class="hljs-keyword">from</span> business;</code></pre><h2 id="case-when、if案例"><a href="#case-when、if案例" class="headerlink" title="case when、if案例"></a>case when、if案例</h2><ul><li>员工表，统计男女数量</li></ul><pre><code class="hljs sql">(name string,dept_id string,sex_string)</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">select</span> dept_id, <span class="hljs-keyword">sum</span>(<span class="hljs-keyword">case</span> sex <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>) male_count, <span class="hljs-keyword">sum</span>(<span class="hljs-keyword">case</span> sex <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>) female_count<span class="hljs-keyword">from</span> emp_sex<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_id;</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">select</span> dept_id, <span class="hljs-keyword">sum</span>(<span class="hljs-keyword">if</span>(sex=<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)) male_count, <span class="hljs-keyword">sum</span>(<span class="hljs-keyword">if</span>(sex=<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)) female_count<span class="hljs-keyword">from</span> emp_sex<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_id;</code></pre><h2 id="行转列、列转行"><a href="#行转列、列转行" class="headerlink" title="行转列、列转行"></a>行转列、列转行</h2><ul><li><p>注意：concat拼接一列要用聚合函数group by</p></li><li><p>多个列合并到一起</p></li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">concat</span>(deptno,<span class="hljs-string">&#x27;-&#x27;</span>,dname) <span class="hljs-keyword">from</span> dept;</code></pre><ul><li>注意，类型是数组，类型要相同</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-keyword">name</span>,age,sex) <span class="hljs-keyword">from</span> student;</code></pre><ul><li>把一列转化为一行，格式是[  ,  ,  ,  ,]</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> collect_set(<span class="hljs-keyword">id</span>) <span class="hljs-keyword">from</span> student;</code></pre><ul><li><p>explode(col)，将hive中一列中复杂的asrray或者map结构拆分成多行</p></li><li><p>lateral view</p></li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  movie, categroy_name<span class="hljs-keyword">from</span> movie_info <span class="hljs-keyword">lateral</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">explode</span>(<span class="hljs-keyword">category</span>) table_tmp <span class="hljs-keyword">as</span> category_name;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的安装以及常用命令</title>
    <link href="/2020/10/18/hexo/"/>
    <url>/2020/10/18/hexo/</url>
    
    <content type="html"><![CDATA[<h4 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h4><h5 id="新文章创建"><a href="#新文章创建" class="headerlink" title="新文章创建"></a>新文章创建</h5><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> hexo</code></pre><h5 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h5><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s</code></pre><h5 id="运行和部署-第一次应该提示用户名密码"><a href="#运行和部署-第一次应该提示用户名密码" class="headerlink" title="运行和部署(第一次应该提示用户名密码)"></a>运行和部署(第一次应该提示用户名密码)</h5><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo deploy</span></code></pre><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="安装node-js-、hexo"><a href="#安装node-js-、hexo" class="headerlink" title="安装node.js 、hexo"></a>安装node.js 、hexo</h5><h5 id="生成密钥，拷贝到github上"><a href="#生成密钥，拷贝到github上" class="headerlink" title="生成密钥，拷贝到github上"></a>生成密钥，拷贝到github上</h5><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;cocoacm_liyiming@163.com&quot;</span></code></pre><h5 id="使用这个命令查看下"><a href="#使用这个命令查看下" class="headerlink" title="使用这个命令查看下"></a>使用这个命令查看下</h5><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com</code></pre><h5 id="个人的环境变量配置"><a href="#个人的环境变量配置" class="headerlink" title="个人的环境变量配置"></a>个人的环境变量配置</h5><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&quot;kskuangshao&quot;</span>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&quot;cocoacm_liyiming@163.com&quot;</span></code></pre><h5 id="个人的环境变量配置创建仓库"><a href="#个人的环境变量配置创建仓库" class="headerlink" title="个人的环境变量配置创建仓库"></a>个人的环境变量配置创建仓库</h5><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kskuangshao/</span>kskuangshao.github.io 这里一样  这里一样</code></pre><h5 id="安装deployer"><a href="#安装deployer" class="headerlink" title="安装deployer"></a>安装deployer</h5><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre><h5 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h5><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:   <span class="hljs-attribute">type</span>: git   <span class="hljs-attribute">repo</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:kskuangshao/kskuangshao.github.io.git   <span class="hljs-attribute">branch</span>: master</code></pre><p><u>我觉得最大的坑就是配置文件，必须严格按照那特定的格式，可是官方文档也没特别提醒，必须是这个格式，type，repo，branch前两个空格，“：”后面一个空格，差一个都不行的：deploy:  type: git  repository: url  branch: master</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/17/hello-world/"/>
    <url>/2020/10/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
