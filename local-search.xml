<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>tez</title>
    <link href="/2020/10/28/tez/"/>
    <url>/2020/10/28/tez/</url>
    
    <content type="html"><![CDATA[<h1 id="tez官网"><a href="#tez官网" class="headerlink" title="tez官网"></a>tez官网</h1><pre><code class="hljs sql">http://tez.apache.org/</code></pre><h1 id="什么是Tez？"><a href="#什么是Tez？" class="headerlink" title="什么是Tez？"></a>什么是Tez？</h1><p>tez是一个基于内存的计算引擎，通过允许像 Apache Hive 和 Apache Pig 这样的项目运行复杂的 DAG 任务，Tez 可用于处理数据。</p><ul><li>优点：快，节点少</li><li>缺点：对内存要求高</li></ul><h1 id="Tez安装部署"><a href="#Tez安装部署" class="headerlink" title="Tez安装部署"></a>Tez安装部署</h1><ol><li>查看官网选择和hadoop匹配的tez版本</li></ol><pre><code class="hljs applescript">hadoop <span class="hljs-built_in">version</span></code></pre><ol start="2"><li>下载</li></ol><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.apache.org<span class="hljs-regexp">/dyn/</span>closer.lua<span class="hljs-regexp">/tez/</span><span class="hljs-number">0.8</span>.<span class="hljs-number">5</span>/</code></pre><ol start="3"><li>解压</li></ol><ul><li>注意：解压到hive的节点上</li></ul><ol start="4"><li>下载的tez包（ apache-tez-0.8.5-bin.tar.gz） 上传到hdfs上</li></ol><ul><li>除了hive节点，其他节点也需要tez计算</li></ul><p>5. </p>]]></content>
    
    
    
    <tags>
      
      <tag>hive tez</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql函数</title>
    <link href="/2020/10/28/sql01/"/>
    <url>/2020/10/28/sql01/</url>
    
    <content type="html"><![CDATA[<h1 id="总结常用sql函数"><a href="#总结常用sql函数" class="headerlink" title="总结常用sql函数"></a>总结常用sql函数</h1><h2 id="1-unix-timestamp-amp-from-unixtime"><a href="#1-unix-timestamp-amp-from-unixtime" class="headerlink" title="1.unix_timestamp &amp; from_unixtime()"></a>1.unix_timestamp &amp; from_unixtime()</h2><ul><li>unix_timestamp</li></ul><pre><code class="hljs sql">spark-sql&gt; select unix_timestamp(&#x27;2018-12-05 01:10:00&#x27;,&#x27;yyyy-MM-dd HH:mm:ss&#x27;);1543943400</code></pre> <pre><code class="hljs sql">spark-sql&gt; select unix_timestamp(&#x27;2018-12-05&#x27;,&#x27;yyyy-MM-dd&#x27;);1543939200</code></pre><ul><li>from_unixtime()</li></ul><pre><code class="hljs sql">spark-sql&gt; select from_unixtime(1543943400,&#x27;yyyy-MM-dd&#x27;);2018-12-05</code></pre><h2 id="2-cast-name-as-string-类型转换"><a href="#2-cast-name-as-string-类型转换" class="headerlink" title="2. cast(name as string) 类型转换"></a>2. cast(name as string) 类型转换</h2><ul><li>cnt int –&gt; cnt string</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">cast</span>(cnt <span class="hljs-keyword">as</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">from</span> player;</code></pre><h2 id="3-if-name-’ks’-x-y"><a href="#3-if-name-’ks’-x-y" class="headerlink" title="3. if(name=’ks’,x,y)"></a>3. if(name=’ks’,x,y)</h2><ul><li>如果name字段是ks，返回x，否则返回y</li></ul><h2 id="4-hive中map类型的字段使用"><a href="#4-hive中map类型的字段使用" class="headerlink" title="4. hive中map类型的字段使用"></a>4. hive中map类型的字段使用</h2><ul><li>创建表</li><li>注意集合，key的分隔符</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> player_info (groupname <span class="hljs-keyword">string</span>,info <span class="hljs-keyword">map</span>&lt;<span class="hljs-keyword">string</span>,<span class="hljs-keyword">string</span>&gt;)<span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> <span class="hljs-keyword">DELIMITED</span>                                          <span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\t&#x27;</span>                                COLLECTION ITEMS <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;,&#x27;</span>                       <span class="hljs-keyword">MAP</span> <span class="hljs-keyword">KEYS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;:&#x27;</span>;</code></pre><ul><li>文本数据准备</li><li>player_info.txt</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">win_team</span><span class="hljs-selector-tag">name</span><span class="hljs-selector-pseudo">:ks</span>,<span class="hljs-selector-tag">age</span><span class="hljs-selector-pseudo">:18</span>,<span class="hljs-selector-tag">position</span><span class="hljs-selector-pseudo">:carry</span><span class="hljs-selector-tag">win_team</span><span class="hljs-selector-tag">name</span><span class="hljs-selector-pseudo">:ajshon</span>,<span class="hljs-selector-tag">age</span><span class="hljs-selector-pseudo">:19</span>,<span class="hljs-selector-tag">position</span><span class="hljs-selector-pseudo">:mid</span><span class="hljs-selector-tag">lose_team</span><span class="hljs-selector-tag">name</span><span class="hljs-selector-pseudo">:rain</span>,<span class="hljs-selector-tag">age</span><span class="hljs-selector-pseudo">:28</span>,<span class="hljs-selector-tag">position</span><span class="hljs-selector-pseudo">:top</span></code></pre><ul><li>导入数据到表</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">load</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/home/hadoop/data/player_info.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> player_info;</code></pre><ul><li>查询</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> info[<span class="hljs-string">&#x27;name&#x27;</span>] <span class="hljs-keyword">from</span> player_info;</code></pre><ul><li>结果</li></ul><pre><code class="hljs apache"><span class="hljs-attribute">Driver</span>.java:<span class="hljs-number">376</span>, took <span class="hljs-number">0</span>.<span class="hljs-number">719682</span> s<span class="hljs-attribute">ks</span><span class="hljs-attribute">ajshon</span><span class="hljs-attribute">rain</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql语句</title>
    <link href="/2020/10/28/sql02/"/>
    <url>/2020/10/28/sql02/</url>
    
    <content type="html"><![CDATA[<h1 id="总结常用sql语句"><a href="#总结常用sql语句" class="headerlink" title="总结常用sql语句"></a>总结常用sql语句</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>建表语句</p><ul><li>多表结构相同</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">as</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player1<span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player2;</code></pre><ul><li>多表结构不相同</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tables2<span class="hljs-keyword">as</span> <span class="hljs-keyword">with</span>a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player1),b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,age <span class="hljs-keyword">from</span> player2)<span class="hljs-keyword">select</span> a.id,a.name,b.age <span class="hljs-keyword">from</span> a,b <span class="hljs-keyword">where</span> a.id=b.id;</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tables3<span class="hljs-keyword">as</span> <span class="hljs-keyword">with</span>a <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> player1),b <span class="hljs-keyword">as</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,age <span class="hljs-keyword">from</span> player2)<span class="hljs-keyword">select</span> a.id,a.name,b.age <span class="hljs-keyword">from</span> a<span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span>b <span class="hljs-keyword">on</span> a.id=b.id;</code></pre><h2 id="元数据-和-建表语句-分开"><a href="#元数据-和-建表语句-分开" class="headerlink" title="元数据 和 建表语句 分开"></a>元数据 和 建表语句 分开</h2><h3 id="方式一（hdfs）"><a href="#方式一（hdfs）" class="headerlink" title="方式一（hdfs）"></a>方式一（hdfs）</h3><ul><li>元数据test.txt上传hdfs</li></ul><pre><code class="hljs awk">hdfs dfs -put test.txt <span class="hljs-regexp">/hive/</span>test/</code></pre><ul><li>建表指定位置</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> player4(<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> <span class="hljs-keyword">delimited</span> <span class="hljs-keyword">fields</span> <span class="hljs-keyword">terminated</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span> location <span class="hljs-string">&#x27;/hive/test&#x27;</span>;</code></pre><h3 id="方式二（load方式，本地、hdfs）"><a href="#方式二（load方式，本地、hdfs）" class="headerlink" title="方式二（load方式，本地、hdfs）"></a>方式二（load方式，本地、hdfs）</h3><ul><li>建表</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> player4(<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> <span class="hljs-keyword">delimited</span> <span class="hljs-keyword">fields</span> <span class="hljs-keyword">terminated</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span></code></pre><ul><li>元数据load到表中(“[ ]”代表可选)</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">load</span> <span class="hljs-keyword">data</span> [<span class="hljs-keyword">local</span>] inpath <span class="hljs-string">&#x27;/home/hadoop/data/test.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> player4</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hive数据类型、语法、分区表等概念</title>
    <link href="/2020/10/26/hive01/"/>
    <url>/2020/10/26/hive01/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table><thead><tr><th>Hive数据类型</th><th>java数据类型</th><th>长度</th><th>例子</th></tr></thead><tbody><tr><td>TinyInt</td><td>byte</td><td>1byte有符号整数</td><td>20</td></tr><tr><td>SmallInt</td><td>short</td><td>2byte有符号整数</td><td>20</td></tr><tr><td>Int</td><td>int</td><td>4byte有符号整数</td><td>20</td></tr><tr><td>BigInt</td><td>long</td><td>8byte有符号整数</td><td>20</td></tr><tr><td>Boolean</td><td>boolean</td><td>布尔类型</td><td>true，false</td></tr><tr><td>Float</td><td>float</td><td>单精度浮点数</td><td>3.14159</td></tr><tr><td>Double</td><td>double</td><td>双精度浮点数</td><td>3.14159</td></tr><tr><td>String</td><td>string</td><td>字符</td><td>‘now is time’</td></tr><tr><td>Timestamp</td><td></td><td>时间类型</td><td></td></tr><tr><td>binary</td><td></td><td>字节数组</td><td></td></tr></tbody></table><ul><li>hive中的string相当于数据库的varchar，理论上能存2G的字符串</li><li>小转大，不能大转小</li><li>string、float可以隐式转换成double</li><li>tinyint、smallint、int可以转换为float</li><li>boolean类型不能转换为其他类型</li><li>强制类型转换，可以使用CAST(1 AS INT)把字符串’1’转换成整数1，㘝强制类型转换失败，返回NULL</li></ul><h1 id="DDL数据定义"><a href="#DDL数据定义" class="headerlink" title="DDL数据定义"></a>DDL数据定义</h1><h2 id="库的增删改查"><a href="#库的增删改查" class="headerlink" title="库的增删改查"></a>库的增删改查</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h3><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> mydb;</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> mydb location <span class="hljs-string">&#x27;/db_hive2.db&#x27;</span>;</code></pre><h3 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2. 删除数据库"></a>2. 删除数据库</h3><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> mydb;</code></pre><ul><li>删除不为空的database</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> mydb <span class="hljs-keyword">cascade</span>;</code></pre><h3 id="3-查看数据库"><a href="#3-查看数据库" class="headerlink" title="3. 查看数据库"></a>3. 查看数据库</h3><ul><li>模糊查询</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;db_hive*&#x27;</span>;</code></pre><ul><li>查看数据库详细信息</li></ul><pre><code class="hljs pgsql"><span class="hljs-keyword">desc</span> <span class="hljs-keyword">database</span> extended db_hive;</code></pre><h3 id="4-修改数据库"><a href="#4-修改数据库" class="headerlink" title="4. 修改数据库"></a>4. 修改数据库</h3><ul><li>注意：元数据信息不能更改（数据库名，数据库所在位置）</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> db_hive <span class="hljs-keyword">set</span> dbproperties(<span class="hljs-string">&#x27;createtime&#x27;</span>=<span class="hljs-string">&#x27;20200808&#x27;</span>)</code></pre><h2 id="表的增删改查"><a href="#表的增删改查" class="headerlink" title="表的增删改查"></a>表的增删改查</h2><h3 id="1-建表语句"><a href="#1-建表语句" class="headerlink" title="1. 建表语句"></a>1. 建表语句</h3><ul><li>分区分的是文件夹，分桶分的是文件（对应partitioned by、clustered by）</li><li>‘[ ]’表示可选，’|’表示二选一</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">TEMPORARY</span>] [<span class="hljs-keyword">EXTERNAL</span>] <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db_name.]table_name  [(col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ... [constraint_specification])]  [<span class="hljs-keyword">COMMENT</span> table_comment]  [PARTITIONED <span class="hljs-keyword">BY</span> (col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ...)]  [CLUSTERED <span class="hljs-keyword">BY</span> (col_name, col_name, ...) [SORTED <span class="hljs-keyword">BY</span> (col_name [<span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span>], ...)] <span class="hljs-keyword">INTO</span> num_buckets BUCKETS]  [SKEWED <span class="hljs-keyword">BY</span> (col_name, col_name, ...)     <span class="hljs-keyword">ON</span> ((col_value, col_value, ...), (col_value, col_value, ...), ...)     [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> DIRECTORIES]  [   [<span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> row_format]    [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> file_format]     | <span class="hljs-keyword">STORED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;storage.handler.class.name&#x27;</span> [<span class="hljs-keyword">WITH</span> SERDEPROPERTIES (...)]  ]  [LOCATION hdfs_path]</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">TEMPORARY</span>] [<span class="hljs-keyword">EXTERNAL</span>] <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db_name.]table_name    <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> TEMPORARY available in Hive 0.14.0 and later)</span>  [(col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ... [constraint_specification])]  [<span class="hljs-keyword">COMMENT</span> table_comment]  [PARTITIONED <span class="hljs-keyword">BY</span> (col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ...)]  [CLUSTERED <span class="hljs-keyword">BY</span> (col_name, col_name, ...) [SORTED <span class="hljs-keyword">BY</span> (col_name [<span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span>], ...)] <span class="hljs-keyword">INTO</span> num_buckets BUCKETS]  [SKEWED <span class="hljs-keyword">BY</span> (col_name, col_name, ...)                  <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.10.0 and later)]</span>     <span class="hljs-keyword">ON</span> ((col_value, col_value, ...), (col_value, col_value, ...), ...)     [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> DIRECTORIES]  [   [<span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> row_format]    [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> file_format]     | <span class="hljs-keyword">STORED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;storage.handler.class.name&#x27;</span> [<span class="hljs-keyword">WITH</span> SERDEPROPERTIES (...)]  <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.6.0 and later)</span>  ]  [LOCATION hdfs_path]  [TBLPROPERTIES (property_name=property_value, ...)]   <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.6.0 and later)</span>   [<span class="hljs-keyword">AS</span> select_statement];   <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.5.0 and later; not supported for external tables)</span>   <span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">TEMPORARY</span>] [<span class="hljs-keyword">EXTERNAL</span>] <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db_name.]table_name  <span class="hljs-keyword">LIKE</span> existing_table_or_view_name  [LOCATION hdfs_path]; data_type  : primitive_type  | array_type  | map_type  | struct_type  | union_type  <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.7.0 and later)</span> primitive_type  : TINYINT  | SMALLINT  | INT  | BIGINT  | BOOLEAN  | FLOAT  | DOUBLE  | DOUBLE PRECISION <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 2.2.0 and later)</span>  | STRING  | BINARY      <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.8.0 and later)</span>  | TIMESTAMP   <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.8.0 and later)</span>  | DECIMAL     <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.11.0 and later)</span>  | DECIMAL(precision, scale)  <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.13.0 and later)</span>  | DATE        <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.12.0 and later)</span>  | VARCHAR     <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.12.0 and later)</span>  | CHAR        <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.13.0 and later)</span> array_type  : ARRAY &lt; data_type &gt; map_type  : MAP &lt; primitive_type, data_type &gt; struct_type  : STRUCT &lt; col_name : data_type [COMMENT col_comment], ...&gt; union_type   : UNIONTYPE &lt; data_type, data_type, ... &gt;  -- (Note: Available in Hive 0.7.0 and later) row_format  : DELIMITED [FIELDS TERMINATED BY char [ESCAPED BY char]] [COLLECTION ITEMS TERMINATED BY char]        [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char]        [NULL DEFINED AS char]   <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.13 and later)</span>  | SERDE serde_name [<span class="hljs-keyword">WITH</span> SERDEPROPERTIES (property_name=property_value, property_name=property_value, ...)] file_format:  : SEQUENCEFILE  | TEXTFILE    <span class="hljs-comment">-- (Default, depending on hive.default.fileformat configuration)</span>  | RCFILE      <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.6.0 and later)</span>  | ORC         <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.11.0 and later)</span>  | PARQUET     <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.13.0 and later)</span>  | AVRO        <span class="hljs-comment">-- (<span class="hljs-doctag">Note:</span> Available in Hive 0.14.0 and later)</span>  | INPUTFORMAT input_format_classname OUTPUTFORMAT output_format_classname constraint_specification:  : [, PRIMARY <span class="hljs-keyword">KEY</span> (col_name, ...) <span class="hljs-keyword">DISABLE</span> <span class="hljs-keyword">NOVALIDATE</span> ]    [, <span class="hljs-keyword">CONSTRAINT</span> constraint_name <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (col_name, ...) <span class="hljs-keyword">REFERENCES</span> table_name(col_name, ...) <span class="hljs-keyword">DISABLE</span> <span class="hljs-keyword">NOVALIDATE</span></code></pre><h3 id="2-修改表"><a href="#2-修改表" class="headerlink" title="2. 修改表"></a>2. 修改表</h3><ul><li>重命名表</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student4 <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> student;</code></pre><ul><li>增删改分区</li></ul><p>见如下分区表</p><ul><li>增加、修改、替换列信息</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student4 <span class="hljs-keyword">add</span> <span class="hljs-keyword">columns</span>(<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>);</code></pre><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student4 <span class="hljs-keyword">change</span> <span class="hljs-keyword">column</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">names</span> <span class="hljs-keyword">string</span>;</code></pre><pre><code class="hljs sql">替换所有列<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student4 <span class="hljs-keyword">replace</span> <span class="hljs-keyword">columns</span>(did <span class="hljs-built_in">int</span>);</code></pre><h2 id="内部表和外部表区别"><a href="#内部表和外部表区别" class="headerlink" title="内部表和外部表区别"></a>内部表和外部表区别</h2><ol><li>删除表内部表的元数据也会删除，外部表则不会</li><li>建表语句不同，外部表有external关键字</li></ol><ul><li><p>内部表也叫管理表</p></li><li><p>内部表转外部表（大写！）</p></li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student2 <span class="hljs-keyword">set</span> tblproperties(<span class="hljs-string">&#x27;EXTERNAL&#x27;</span>=<span class="hljs-string">&#x27;TURE&#x27;</span>);</code></pre><ul><li>然后查询一下</li></ul><pre><code class="hljs sql">desc formatted student2;</code></pre><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>hive的分区表就是分目录，把一个大的数据集根据业务需要分割成小的数据集，在查询的时候通过WHERE子句中的表达选择所需要的的指定分区，这样查询效率高。谓词下推</p><ul><li>谓词下推：先过滤成小数据集，再查询，效率高。</li><li>分区字段也是表中的一个字段，只不过比较特殊。（不能使用表属性名作为分区字段名，自行体会）</li></ul><h3 id="一级分区"><a href="#一级分区" class="headerlink" title="一级分区"></a>一级分区</h3><ol><li>增加分区</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">add</span> <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;202008&#x27;</span>) <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;202009&#x27;</span>);</code></pre><ol start="2"><li>删除分区</li></ol><ul><li>注意这里是’ , ‘</li></ul><pre><code class="hljs sql">alte table student <span class="hljs-keyword">drop</span> <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;202008&#x27;</span>) ,<span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;202009&#x27;</span>);</code></pre><ol start="3"><li>查看分区表有多少个分区</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">partitions</span> student;</code></pre><ol start="4"><li>查看分区表的结构</li></ol><pre><code class="hljs sql">desc formatted student;</code></pre><h3 id="二级分区"><a href="#二级分区" class="headerlink" title="二级分区"></a>二级分区</h3><ol><li>建表</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student2(<span class="hljs-keyword">id</span> <span class="hljs-built_in">int</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">string</span>) partitioned <span class="hljs-keyword">by</span> (<span class="hljs-keyword">month</span> <span class="hljs-keyword">string</span>,<span class="hljs-keyword">day</span> <span class="hljs-keyword">string</span>) <span class="hljs-keyword">row</span> <span class="hljs-keyword">format</span> <span class="hljs-keyword">delimited</span> <span class="hljs-keyword">fields</span> <span class="hljs-keyword">terminated</span> <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;</code></pre><ol start="2"><li>导入本地数据</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">load</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/home/hadoop/data/student2.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> student2 <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;2019-07&#x27;</span>,<span class="hljs-keyword">day</span>=<span class="hljs-string">&#x27;01&#x27;</span>);</code></pre><ol start="3"><li>查询</li></ol><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student2 <span class="hljs-keyword">where</span> <span class="hljs-keyword">month</span> = <span class="hljs-string">&#x27;2019-07&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">day</span> = <span class="hljs-string">&#x27;01&#x27;</span>;</code></pre><pre><code> 4. 如果手动创建了一个分区文件夹，并上传文件，是不能直接查分区的，需要修复或者添加分区</code></pre><ul><li>修复指令（很多分区都没有添加）</li></ul><pre><code class="hljs sql">msck <span class="hljs-keyword">repair</span> <span class="hljs-keyword">table</span> student2;</code></pre><ul><li>添加分区（推荐）</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student2 <span class="hljs-keyword">add</span> <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span> = <span class="hljs-string">&#x27;2019-11&#x27;</span>,<span class="hljs-keyword">day</span> = <span class="hljs-string">&#x27;01&#x27;</span>)</code></pre><h1 id="DML数据操作"><a href="#DML数据操作" class="headerlink" title="DML数据操作"></a>DML数据操作</h1><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><h3 id="1-向表中装载数据"><a href="#1-向表中装载数据" class="headerlink" title="1. 向表中装载数据"></a>1. 向表中装载数据</h3><pre><code class="hljs sql"><span class="hljs-keyword">load</span> <span class="hljs-keyword">data</span> [<span class="hljs-keyword">local</span>] inpath <span class="hljs-string">&#x27;xxx/xxx/xxx.txt&#x27;</span> overwrite|<span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> student [<span class="hljs-keyword">partition</span>(<span class="hljs-keyword">day</span>=<span class="hljs-string">&#x27;01&#x27;</span>,<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;201708&#x27;</span>]</code></pre><ul><li>local：本地或者hdfs</li></ul><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a>2. 插入数据</h3><ul><li>基本插入</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;201702&#x27;</span>) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;ks&#x27;</span>)</code></pre><ul><li>覆盖插入</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> student <span class="hljs-keyword">partition</span>(<span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;20170208&#x27;</span>) <span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">month</span>=<span class="hljs-string">&#x27;201702&#x27;</span></code></pre><h3 id="3-创建表并加载数据"><a href="#3-创建表并加载数据" class="headerlink" title="3.创建表并加载数据"></a>3.创建表并加载数据</h3><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> student <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span>,<span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> student</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的安装以及常用命令</title>
    <link href="/2020/10/18/hexo/"/>
    <url>/2020/10/18/hexo/</url>
    
    <content type="html"><![CDATA[<h4 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h4><h5 id="新文章创建"><a href="#新文章创建" class="headerlink" title="新文章创建"></a>新文章创建</h5><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> hexo</code></pre><h5 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h5><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s</code></pre><h5 id="运行和部署-第一次应该提示用户名密码"><a href="#运行和部署-第一次应该提示用户名密码" class="headerlink" title="运行和部署(第一次应该提示用户名密码)"></a>运行和部署(第一次应该提示用户名密码)</h5><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo deploy</span></code></pre><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="安装node-js-、hexo"><a href="#安装node-js-、hexo" class="headerlink" title="安装node.js 、hexo"></a>安装node.js 、hexo</h5><h5 id="生成密钥，拷贝到github上"><a href="#生成密钥，拷贝到github上" class="headerlink" title="生成密钥，拷贝到github上"></a>生成密钥，拷贝到github上</h5><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;cocoacm_liyiming@163.com&quot;</span></code></pre><h5 id="使用这个命令查看下"><a href="#使用这个命令查看下" class="headerlink" title="使用这个命令查看下"></a>使用这个命令查看下</h5><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com</code></pre><h5 id="个人的环境变量配置"><a href="#个人的环境变量配置" class="headerlink" title="个人的环境变量配置"></a>个人的环境变量配置</h5><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&quot;kskuangshao&quot;</span>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&quot;cocoacm_liyiming@163.com&quot;</span></code></pre><h5 id="个人的环境变量配置创建仓库"><a href="#个人的环境变量配置创建仓库" class="headerlink" title="个人的环境变量配置创建仓库"></a>个人的环境变量配置创建仓库</h5><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kskuangshao/</span>kskuangshao.github.io 这里一样  这里一样</code></pre><h5 id="安装deployer"><a href="#安装deployer" class="headerlink" title="安装deployer"></a>安装deployer</h5><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre><h5 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h5><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:   <span class="hljs-attribute">type</span>: git   <span class="hljs-attribute">repo</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:kskuangshao/kskuangshao.github.io.git   <span class="hljs-attribute">branch</span>: master</code></pre><p><u>我觉得最大的坑就是配置文件，必须严格按照那特定的格式，可是官方文档也没特别提醒，必须是这个格式，type，repo，branch前两个空格，“：”后面一个空格，差一个都不行的：deploy:  type: git  repository: url  branch: master</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/17/hello-world/"/>
    <url>/2020/10/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
